<!DOCTYPE html>
<html class="gr__realpython_com" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/pubads_impl_rendering_2019121602.js"></script><script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/jquery_002.js"></script><script type="text/javascript" async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/ecommerce.js"></script><script type="text/javascript" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/visit"></script><script type="text/javascript" async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/client.js"></script><script type="text/javascript" async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/videoplayer.js"></script><script type="text/javascript" async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/prebid.js"></script>
<link href="https://files.realpython.com/" rel="dns-prefetch">
<link href="https://fonts.googleapis.com/" rel="dns-prefetch">
<link href="https://fonts.gstatic.com/" rel="dns-prefetch">
<title>Itertools in Python 3, By Example – Real Python</title>
<meta name="author" content="Real Python">
<meta name="description" content="Master Python's itertools module by constructing practical examples. We'll start out simple and then gradually increase in complexity, encouraging you to &quot;think iteratively.&quot;">
<meta name="keywords" content="python3, itertools">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel="canonical" href="https://realpython.com/python-itertools/">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image" content="https://files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg">
<meta property="og:image" content="https://files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg">
<meta name="twitter:creator" content="@realpython">
<meta name="twitter:site" content="@realpython">
<meta property="og:title" content="Itertools in Python 3, By Example – Real Python">
<meta property="og:type" content="article">
<meta property="og:url" content="https://realpython.com/python-itertools/">
<meta property="og:description" content="Master Python's itertools module by constructing practical examples. We'll start out simple and then gradually increase in complexity, encouraging you to &quot;think iteratively.&quot;">
<link href="https://realpython.com/static/favicon.68cbf4197b0c.png" rel="icon">
<link href="https://realpython.com/atom.xml" rel="alternate" title="Real Python" type="application/atom+xml">
<link rel="manifest" href="https://realpython.com/manifest.json">
<link rel="stylesheet" href="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/realpython.css">
<script async="" type="text/javascript" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/gpt.js"></script><script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/2220911568135371.js" async=""></script><script async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/fbevents.js"></script><script type="text/javascript" async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/6214500.js"></script><script async="" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/analytics.js"></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-35184939-1', 'auto', {'allowLinker': true});
  ga('require', 'linker');
  ga('linker:autoLink', ['fastspring.com', 'realpython.onfastspring.com', 'onfastspring.com']);
  
  ga('send', 'pageview');
  
  ga('require', 'ecommerce');
  
  
</script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/count-data.js"></script><script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/OneSignalPageSDKES6.js" async=""></script><style type="text/css">#waldo-sticky-footer-wrapper {position: fixed; width: 100%; bottom: 0px; left: 0px; text-align: center; z-index: 9000;}#waldo-sticky-footer-wrapper > div {position: relative; display: inline-block}#waldo-sticky-footer-wrapper iframe, #waldo-sticky-footer-wrapper div {margin-left: auto;margin-right: auto;}.waldo-sticky-sidebar{position: fixed; top: 10px;z-index: 90}.waldo-sticky-css{position: sticky; top: 10px; z-index: 90}.waldo-overlay{position: fixed;height: 100%;width: 100%;top: 0;left: 0;z-index: 105;background: rgba(0,0,0,0.7);}#waldo-counter {position: absolute;bottom: 0;right: 0;color: #fff;font-size: 30px;padding: 15px;}.waldo-bfleft {position: fixed; left: 0; top: 10px;z-index:101;}.waldo-bfright {position: fixed; right: 0; top: 10px;z-index:101;}div[class^="app_gdpr-"] a {color: #41afbb !important; text-decoration: underline !important}#waldo-close-button a {border: 1px solid rgba(0,0,0,.35);padding: 3px;font-size: 12px;color: #fff;font-weight: bold;background-color: #777;}</style><script type="text/javascript">googletag.cmd.push(function() {gptAdSlots[2168] = googletag.defineSlot('/124067137/realpython728x90FL_1', [[728, 90], [300, 250]], 'waldo-tag-2168').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[4996] = googletag.defineSlot('/124067137/realpython728x90FS_1', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-4996').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[4997] = googletag.defineSlot('/8491498/realpython728x90FS_1_Universal_Passback_5d430fd2a1898', [[728, 90], [300, 250]], 'waldo-tag-4997').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[4998] = googletag.defineSlot('/124067137/realpython728x90FS_2', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-4998').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[4999] = googletag.defineSlot('/8491498/realpython728x90FS_2_Universal_Passback_5d430fd92d33c', [[728, 90], [300, 250]], 'waldo-tag-4999').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5000] = googletag.defineSlot('/124067137/realpython728x90FS_3', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5000').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5001] = googletag.defineSlot('/8491498/realpython728x90FS_3_Universal_Passback_5d430fdf83604', [[728, 90], [300, 250]], 'waldo-tag-5001').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5002] = googletag.defineSlot('/124067137/realpython728x90FS_4', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5002').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5003] = googletag.defineSlot('/8491498/realpython728x90FS_4_Universal_Passback_5d430fe599dde', [[728, 90], [300, 250]], 'waldo-tag-5003').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5004] = googletag.defineSlot('/124067137/realpython728x90FS_5', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5004').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5005] = googletag.defineSlot('/8491498/realpython728x90FS_5_Universal_Passback_5d430feb2e45f', [[728, 90], [300, 250]], 'waldo-tag-5005').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5257] = googletag.defineSlot('/124067137/realpython728x90FS_6', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5257').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5258] = googletag.defineSlot('/8491498/realpython728x90FS_6_Universal_Passback_5d52bf0d1950a', [[728, 90], [300, 250]], 'waldo-tag-5258').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5259] = googletag.defineSlot('/124067137/realpython728x90FS_7', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5259').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5260] = googletag.defineSlot('/8491498/realpython728x90FS_7_Universal_Passback_5d52bf159c8df', [[728, 90], [300, 250]], 'waldo-tag-5260').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5261] = googletag.defineSlot('/124067137/realpython728x90FS_8', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5261').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5262] = googletag.defineSlot('/8491498/realpython728x90FS_8_Universal_Passback_5d52bf2480f67', [[728, 90], [300, 250]], 'waldo-tag-5262').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5263] = googletag.defineSlot('/124067137/realpython728x90FS_9', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5263').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5264] = googletag.defineSlot('/8491498/realpython728x90FS_9_Universal_Passback_5d52bf2d3672a', [[728, 90], [300, 250]], 'waldo-tag-5264').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[5265] = googletag.defineSlot('/124067137/realpython728x90FS_10', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-5265').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[5266] = googletag.defineSlot('/8491498/realpython728x90FS_10_Universal_Passback_5d52bf349b4d7', [[728, 90], [300, 250]], 'waldo-tag-5266').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();googletag.pubads().addEventListener('impressionViewable', function(event) {hb_refresh(event); hb_sroll_pause(event);});googletag.pubads().addEventListener('slotRenderEnded', function(event) {waldoAddCloseBtn(event); waldoPassbackInit(event);waldoInterstitialInit(event);})});</script><link rel="preload" href="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/integrator.js" as="script"><script type="text/javascript" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/integrator.js"></script><link rel="preload" href="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/integrator_002.js" as="script"><script type="text/javascript" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/integrator_002.js"></script><script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/pubads_impl_2019121602.js" async=""></script><style type="text/css">
  /* === Form-Specific Styles === */
  /* stylelint-disable */

  #drip-106703 {
  }

  #drip-106703 .drip-header {
    background-color: #43ac6a !important;
  }

  #drip-106703 .drip-content h3 {
    color: #43ac6a !important;
    font-size: 29px !important;
  }

  #drip-106703 .drip-submit-button {
    background-color: #43ac6a !important;
    font-size: 19px !important;
  }

  #drip-106703 .drip-submit-button:hover {
    background-color: #40a365 !important;
  }

  #drip-106703 .drip-submit-button:active {
    background-color: #3c9b5f !important;
  }

  #drip-106703 dl dt,
  #drip-106703 .drip-content .drip-description,
  #drip-106703 .drip-errors {
    font-size: 18px !important;
  }

  #drip-106703 .drip-text-field {
    font-size: 18px !important;
  }

  /* === Reset styles === */

  .drip-tab h1,
  .drip-tab h2,
  .drip-tab h3,
  .drip-tab div,
  .drip-tab dl,
  .drip-tab dt,
  .drip-tab dd,
  .drip-tab p,
  .drip-tab a,
  .drip-tab .drip-text-field,
  .drip-tab .drip-text-field:focus,
  .drip-tab .drip-submit-button {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    float: none;
    width: auto;
    background-image: none;
    letter-spacing: 0;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
    -webkit-text-shadow: none !important;
       -moz-text-shadow: none !important;
            text-shadow: none !important;
  }

  .drip-tab a {
    text-decoration: none;
    color: #43ac6a !important;
  }

  .drip-tab :focus {
    outline: 0;
  }

  /* === Clearfix === */

  .drip-clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }
  * html .drip-clearfix             { zoom: 1; } /* IE6 */
  *:first-child+html .drip-clearfix { zoom: 1; } /* IE7 */

  /* === Main Container === */

  .drip-tab-container * {
    box-sizing: content-box;
  }

  /* === Content === */

  .drip-tab .drip-content {
    margin: 0;
    padding: 0;
    width: 380px;
    position: fixed;
    font-size: 100%;
    font: inherit;
    z-index: 10000;
    color: #333;
    vertical-align: baseline;
    text-align: left;
    background-color: #ffffff;
    -webkit-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
       -moz-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
            box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
  }

  .drip-tab.bottom .drip-content {
    bottom: -800px;
    -webkit-border-radius: 8px 8px 0 0;
       -moz-border-radius: 8px 8px 0 0;
            border-radius: 8px 8px 0 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.bottom.left .drip-content {
    left: 40px;
  }

  .drip-tab.bottom.right .drip-content {
    right: 40px;
  }

  .drip-tab.side-image .drip-content {
    width: 650px;
  }

  .drip-tab.side .drip-content {
    top: 10%;
  }

  .drip-tab.side.right .drip-content {
    right: -675px;
    -webkit-border-radius: 8px 0 0 8px;
       -moz-border-radius: 8px 0 0 8px;
            border-radius: 8px 0 0 8px;
    -webkit-transition: right 200ms ease-in;
       -moz-transition: right 200ms ease-in;
         -o-transition: right 200ms ease-in;
            transition: right 200ms ease-in;
  }

  .drip-tab.side.left .drip-content {
    left: -675px;
    -webkit-border-radius: 0 8px 8px 0;
       -moz-border-radius: 0 8px 8px 0;
            border-radius: 0 8px 8px 0;
    -webkit-transition: left 200ms ease-in;
       -moz-transition: left 200ms ease-in;
         -o-transition: left 200ms ease-in;
            transition: left 200ms ease-in;
  }

  .drip-tab.mobile .drip-content {
    width: 100% !important;
    bottom: -800px;
    left: 0;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.drip-scrollable .drip-content {
    overflow-y: scroll;
  }

  /* === Header === */

  .drip-tab .drip-header {
    margin: 0;
    padding: 0;
    position: fixed;
    font-size: 100%;
    font: inherit;
    z-index: 10000;
    color: #333;
    vertical-align: baseline;
    text-align: left;
    -webkit-border-radius: 8px 8px 0 0;
       -moz-border-radius: 8px 8px 0 0;
            border-radius: 8px 8px 0 0;
    -webkit-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
       -moz-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
            box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
  }

  .drip-tab.bottom .drip-header {
    width: 380px;
    bottom: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.bottom .drip-header.drip-hidden {
    bottom: -800px;
  }

  .drip-tab.bottom.left .drip-header {
    left: 40px;
  }

  .drip-tab.bottom.right .drip-header {
    right: 40px;
  }

  .drip-tab.bottom.image-left .drip-header,
  .drip-tab.bottom.image-right .drip-header {
    width: 510px;
  }

  .drip-tab.side .drip-header {
    width: 340px;
    top: 10%;
  }

  .drip-tab.side.right .drip-header {
    right: -100px;
    -webkit-transition: right 400ms ease-in;
       -moz-transition: right 400ms ease-in;
         -o-transition: right 400ms ease-in;
            transition: right 400ms ease-in;
    -webkit-transform: rotate(-90deg) !important;
       -moz-transform: rotate(-90deg) !important;
        -ms-transform: rotate(-90deg) !important;
         -o-transform: rotate(-90deg) !important;
            transform: rotate(-90deg) !important;
    -webkit-transform-origin: right center;
       -moz-transform-origin: right center;
         -o-transform-origin: right center;
            transform-origin: right center;
  }

  .drip-tab.side.right .drip-header.drip-hidden {
    right: -100px;
  }

  .drip-tab.side.left .drip-header {
    left: -100px;
    -webkit-transition: left 400ms ease-in;
       -moz-transition: left 400ms ease-in;
         -o-transition: left 400ms ease-in;
            transition: left 400ms ease-in;
    -webkit-transform: rotate(90deg) !important;
       -moz-transform: rotate(90deg) !important;
        -ms-transform: rotate(90deg) !important;
         -o-transform: rotate(90deg) !important;
            transform: rotate(90deg) !important;
    -webkit-transform-origin: left center;
       -moz-transform-origin: left center;
         -o-transform-origin: left center;
            transform-origin: left center;
  }

  .drip-tab.side.left .drip-header.drip-hidden {
    left: -100px;
  }

  .drip-tab.mobile .drip-header {
    width: 100% !important;
    bottom: 0;
    left: 0;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.mobile .drip-header.drip-hidden {
    bottom: -300px;
  }

  /* === Header Toggle === */

  .drip-tab .drip-toggle {
    display: block;
    text-decoration: none;
    padding: 10px 50px 10px 25px; /* extra padding for the arrow */
  }

  /* === Teaser === */

  .drip-tab .drip-header h2 {
    display: block;
    margin: 0 !important;
    padding: 0 !important;
    border: 0 !important;
    font-size: 16px !important;
    line-height: 1.5 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #fff !important;
    clear: none !important;
    letter-spacing: 0 !important;
    width: auto !important;
  }

  /* === Arrows === */

  .drip-tab .drip-header span.drip-arrow {
    display: block;
    position: absolute;
    margin: 0;
    padding: 0;
    width: 0;
    height: 0;
    line-height: 0;
    top: 20px;
    right: 32px;
  }

  /* === Panel === */

  .drip-tab .drip-content > div.drip-panel {
    padding: 25px;
    background-color: #fff;
    -webkit-border-radius: 6px;
       -moz-border-radius: 6px;
            border-radius: 6px;
  }

  .drip-tab.bottom .drip-content > div.drip-panel {
    -webkit-border-radius: 6px 6px 0 0;
       -moz-border-radius: 6px 6px 0 0;
            border-radius: 6px 6px 0 0;
  }

  .drip-tab.side.left .drip-content > div.drip-panel {
    -webkit-border-radius: 0 6px 6px 0;
       -moz-border-radius: 0 6px 6px 0;
            border-radius: 0 6px 6px 0;
  }

  .drip-tab.side.right .drip-content > div.drip-panel  {
    -webkit-border-radius: 6px 0 0 6px;
       -moz-border-radius: 6px 0 0 6px;
            border-radius: 6px 0 0 6px;
  }

  /* === Powered By === */

  .drip-tab .drip-powered-by {
    padding: 8px;
    text-align: left;
    font-weight: normal;
    font-size: 10px;
    line-height: 16px;
    color: #A8ACB9;
    text-align: right;
    margin-right: 25px;
    text-transform: uppercase;
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .drip-tab .drip-powered-by a {
    color: #A8ACB9 !important;
    text-decoration: underline !important;
    margin-left: 6px;
  }

  /* === Content Sections === */

  .drip-tab.side-image .drip-form-aside {
    width: 245px;
    text-align: center;
  }

  .drip-tab.image-left .drip-form-main {
    margin-left: 270px;
  }

  .drip-tab.image-right .drip-form-main {
    margin-right: 270px;
  }

  .drip-tab.image-left .drip-form-aside {
    float: left;
  }

  .drip-tab.image-right .drip-form-aside {
    float: right;
  }

  @media screen and (max-width: 650px) {
    .drip-tab.side-image .drip-content {
      width: 380px;
    }

    .drip-tab.side-image .drip-form-main {
      margin-left: 0;
      margin-right: 0;
    }

    .drip-tab.side-image .drip-form-aside {
      display: none;
    }
  }

  /* === Content Headings & Paragraphs === */

  .drip-tab .drip-content h3 {
    display: block;
    margin: 0 20px 0 0 !important;
    padding: 0 0 15px 0 !important;
    line-height: 1.4 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #4477bd !important;
    clear: none !important;
  }

  .drip-tab .drip-content .drip-description {
    margin: 0;
    padding: 0 0 20px 0;
    line-height: 1.4;
    text-align: left;
    color: #4F5362;
  }

  .drip-tab .drip-content .drip-post-submission {
    padding: 0;
  }

  .drip-tab .drip-content .drip-description a {
    text-decoration: underline;
  }

  .drip-tab .drip-content .drip-description em {
    font-style: italic;
  }

  .drip-tab .drip-content .drip-description ul,
  .drip-tab .drip-content .drip-description ol {
    list-style-position: outside;
    margin: 8px 0 8px 30px;
  }

  .drip-tab .drip-content .drip-description ul li
  .drip-tab .drip-content .drip-description ol li {
    padding: 0;
  }

  .drip-tab .drip-content .drip-image-center-helper {
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  .drip-tab .drip-content img.drip-image {
    max-width: 245px;
    vertical-align: middle;
  }

  .drip-tab .drip-content a.drip-close {
    position: absolute;
    right: 25px;
    top: 25px;
  }

  .drip-tab .drip-content a.drip-close:hover {
    cursor: pointer;
  }

  /* === Content Subscribe Form === */

  .drip-tab form {
    margin: 0 !important;
    padding: 0 !important;
  }

  .drip-tab dl {
    display: block;
    margin: 0;
    padding: 0 0 5px 0;
  }

  .drip-tab dl dt {
    display: block;
    padding: 0 0 5px 0;
    font-weight: bold;
    color: #4F5362;
  }

  .drip-tab dl.no-labels dt {
    display: none;
  }

  .drip-tab dl dd {
    display: block;
    padding: 0 0 8px 0;
  }

  .drip-tab .drip-text-field {
    margin: 0 !important;
    padding: 10px 12px !important;
    height: auto !important;
    width: 100% !important;
    color: #4F5362 !important;
    background-color: #fff !important;
    border: 1px solid #A8ACB9 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    -webkit-box-sizing: border-box !important;
       -moz-box-sizing: border-box !important;
        -ms-box-sizing: border-box !important;
            box-sizing: border-box !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
  }

  .drip-tab .drip-text-field::-webkit-input-placeholder { /* WebKit browsers */
    color: #A8ACB9 !important;
  }
  .drip-tab .drip-text-field:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
    color: #A8ACB9 !important;
  }
  .drip-tab .drip-text-field::-moz-placeholder { /* Mozilla Firefox 19+ */
    color: #A8ACB9 !important;
  }
  .drip-tab .drip-text-field:-ms-input-placeholder { /* Internet Explorer 10+ */
    color: #A8ACB9 !important;
  }

  .drip-tab .drip-text-field:focus {
    border-color: #9398a9 !important;
    outline: 0;
    background-image: none;
    background-color: #fff !important;
  }

  .drip-tab.mobile .drip-text-field {
    font-size: 16px;
  }

  .drip-tab .drip-errors {
    padding: 5px 0 0 0;
    font-weight: normal;
    color: red;
  }

  .drip-tab .drip-submit-button {
    padding: 6px 26px !important;
    color: #ffffff !important;
    font-weight: bold !important;
    line-height: 1.6 !important;
    border: 0 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    cursor: pointer !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
    height: auto;
    transition: background 0.2s ease !important;
  }

  .drip-tab .drip-submit-button:hover {
    background-image: none !important;
  }

  .drip-tab .drip-submit-button:active {
    background-image: none !important;
  }

  /* checkbox */

  .drip-tab input,
  .drip-tab textarea {
    display: block;
    box-shadow: none;
    position: relative;
    border: 1px solid #cccccc;
    outline: none;
    border-radius: 3px;
    font: inherit;
    color: #262626;
    padding: 12px 18px;
    transition: border-color 300ms;
    width: 100%;
  }

  .drip-tab .zenput--checkbox.hidden {
    margin-bottom: -8px;
    display: none;
  }

  .drip-tab .zenput--checkbox input[type="checkbox"] {
    height: 0;
    width: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
  }

  .drip-tab .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label {
    font: inherit;
    font-size: 16px;
    line-height: 30px;
    color: #262626;
    cursor: pointer;
    white-space: normal;
    word-break: normal;
    display: block;
    padding-left: 36px;
    position: relative;
    transition: color 300ms
  }

  .drip-tab .zenput--checkbox input[type="checkbox"]~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    content: "";
    display: block;
    background: #f5f5f5;
    width: 24px;
    height: 24px;
    position: absolute;
    top: 3px;
    left: 0;
    border-radius: 3px;
    border: 1px solid #cccccc;
    box-sizing: border-box;
    padding: 3px;
    transition: background 300ms ease-out, border-color 300ms;
  }

  .drip-tab .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    opacity: 0;
    width: 16px;
    display: block;
    fill: #cccccc;
    transition: opacity 300ms ease-out;
  }

  .drip-tab .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label {
    color: #333 !important;
  }
  .drip-tab .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    background-color: #ffffff;
    border-color: #a8acb9;
  }
  .drip-tab .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    fill: #43ac6a !important;
    opacity: 1;
  }

  /* hover state */

  .drip-tab .zenput--checkbox input:not([disabled]):not(:checked) ~ .zenput__checkbox-label:hover {
    color: #262626;
  }

  .drip-tab .zenput--checkbox input:not([disabled]):not(:checked) ~ .zenput__checkbox-label:hover  .zenput__checkbox-label__icon {
    border-color: var(--gray-9);
  }

  .drip-tab .zenput--checkbox input:not([disabled]):not(:checked) ~ .zenput__checkbox-label:hover  .zenput__checkbox-label__icon svg {
    opacity: 1;
  }

  /* active state */

  .drip-tab .zenput--checkbox input:not([disabled]) ~ .zenput__checkbox-label:active {
    color: #f224f2;
  }

  /* focus state */

  .drip-tab .zenput--checkbox input:not([disabled]) ~ .zenput__checkbox-label:focus .zenput__checkbox-label__icon,
  .drip-tab .zenput--checkbox input:not([disabled]):focus ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    border-color: #262626;
  }

  /* stylelint-enable */

</style><style type="text/css">
  /* === Form-Specific Styles === */
  /* stylelint-disable */

  #drip-108609 {
    background: #fff !important;
  }

  #drip-108609 .drip-content h3 {
    color: #f9a82f !important;
    font-size: 28px !important;
  }

  #drip-108609 .drip-submit-button {
    background-color: #f9a82f !important;
    font-size: 19px !important;
  }

  #drip-108609 .drip-submit-button:hover {
    background-color: #eda02d !important;
  }

  #drip-108609 .drip-submit-button:active {
    background-color: #e0972a !important;
  }

  #drip-108609 dl dt,
  #drip-108609 .drip-content .drip-description,
  #drip-108609 .drip-errors {
    font-size: 16px !important;
  }

  #drip-108609 .drip-text-field {
    font-size: 16px !important;
  }

  /* === Reset styles === */

  .drip-lightbox h1,
  .drip-lightbox h2,
  .drip-lightbox h3,
  .drip-lightbox div,
  .drip-lightbox dl,
  .drip-lightbox dt,
  .drip-lightbox dd,
  .drip-lightbox p,
  .drip-lightbox a,
  .drip-lightbox .drip-text-field,
  .drip-lightbox .drip-text-field:focus,
  .drip-lightbox .drip-submit-button {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    float: none;
    width: auto;
    background-image: none;
    letter-spacing: 0;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
    -webkit-text-shadow: none !important;
       -moz-text-shadow: none !important;
            text-shadow: none !important;
  }

  .drip-lightbox a {
    text-decoration: none;
    color: #f9a82f !important;
  }

  .drip-lightbox :focus {
    outline: 0;
  }

  .drip-lightbox input::-webkit-input-placeholder { /* WebKit browsers */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input::-moz-placeholder { /* Mozilla Firefox 19+ */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input:-ms-input-placeholder { /* Internet Explorer 10+ */
    color: #A8ACB9 !important;
  }

  /* === Clearfix === */

  .drip-clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }
  * html .drip-clearfix             { zoom: 1; } /* IE6 */
  *:first-child+html .drip-clearfix { zoom: 1; } /* IE7 */

  /* === Backdrop === */

  .drip-backdrop {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 10000;
    background-color: #000;
    opacity: 0;
    -webkit-transition: opacity .3s linear;
       -moz-transition: opacity .3s linear;
         -o-transition: opacity .3s linear;
            transition: opacity .3s linear;
  }

  .drip-backdrop.drip-in {
    opacity: 0.2;
  }

  .drip-backdrop.drip-hidden {
    display: none;
  }

  /* === Main Container === */

  .drip-lightbox-wrapper * {
    box-sizing: content-box;
  }

  /* === Content === */

  .drip-lightbox .drip-content {
    margin: 0 0 0 -190px;
    padding: 0;
    position: fixed;
    width: 380px;
    top: -25%;
    left: 50%;
    font-size: 100%;
    z-index: 11000;
    color: #333;
    vertical-align: baseline;
    background-color: #ffffff;
    opacity: 0;
    -webkit-border-radius: 8px;
       -moz-border-radius: 8px;
            border-radius: 8px;
    -webkit-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
       -moz-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
            box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
    -webkit-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;
       -moz-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
         -o-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
            transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
  }

  .drip-lightbox.drip-in .drip-content {
    top: 15%;
    opacity: 1;
  }

  .drip-lightbox.drip-hidden .drip-content {
    display: none;
  }

  .drip-lightbox.side-image .drip-content {
    margin-left: -325px;
    width: 650px;
  }

  .drip-lightbox.mobile .drip-content {
    margin: 0;
    width: 100%;
    left: 0;
    top: auto;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
  }

  .drip-lightbox.mobile.drip-in .drip-content {
    top: auto;
    bottom: 0;
  }

  .drip-lightbox.drip-scrollable .drip-content {
    overflow-y: scroll;
  }

  /* === Teaser === */

  .drip-lightbox .drip-header h2 {
    display: block;
    margin: 0 !important;
    padding: 12px 0 !important;
    font-size: 14px !important;
    line-height: 13px !important;
    font-weight: bold !important;
    color: #fff !important;
    letter-spacing: 0 !important;
  }

  /* === Panel === */

  .drip-lightbox .drip-content > div.drip-panel {
    padding: 25px;
    background-color: #fff;
    -webkit-border-radius: 6px;
       -moz-border-radius: 6px;
            border-radius: 6px;
  }

  /* === Powered By === */

  .drip-lightbox .drip-powered-by {
    padding: 8px;
    text-align: left;
    font-weight: normal;
    font-size: 10px;
    line-height: 16px;
    color: #A8ACB9;
    text-align: right;
    margin-right: 25px;
    text-transform: uppercase;
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .drip-lightbox .drip-powered-by a {
    color: #A8ACB9 !important;
    text-decoration: underline !important;
    margin-left: 6px;
  }

  /* === Content Sections === */

  .drip-lightbox.side-image .drip-form-aside {
    width: 245px;
    text-align: center;
  }

  .drip-lightbox.image-left .drip-form-main {
    margin-left: 270px;
  }

  .drip-lightbox.image-right .drip-form-main {
    margin-right: 270px;
  }

  .drip-lightbox.image-left .drip-form-aside {
    float: left;
  }

  .drip-lightbox.image-right .drip-form-aside {
    float: right;
  }

  @media screen and (max-width: 650px) {
    /* prevent overriding mobile class styles */
    .drip-lightbox.side-image:not(.mobile) .drip-content {
      margin-left: -190px;
      width: 380px;
    }

    .drip-lightbox.side-image .drip-form-main {
      margin-left: 0;
      margin-right: 0;
    }

    .drip-lightbox.side-image .drip-form-aside {
      display: none;
    }
  }

  /* === Content Headings & Paragraphs === */

  .drip-lightbox .drip-content h3 {
    display: block;
    margin: 0 20px 0 0 !important;
    padding: 0 0 15px 0 !important;
    line-height: 1.4 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #4477bd !important;
    clear: none !important;
  }

  .drip-lightbox .drip-content .drip-description {
    margin: 0;
    padding: 0 0 20px 0;
    line-height: 1.6;
    text-align: left;
  }

  .drip-lightbox .drip-content .drip-post-submission {
    padding: 0;
  }

  .drip-lightbox .drip-content .drip-description a {
    text-decoration: underline;
  }

  .drip-lightbox .drip-content .drip-description em {
    font-style: italic;
  }

  .drip-lightbox .drip-content .drip-description ul,
  .drip-lightbox .drip-content .drip-description ol {
    list-style-position: outside;
    margin: 8px 0 8px 30px;
  }

  .drip-lightbox .drip-content .drip-description ul li
  .drip-lightbox .drip-content .drip-description ol li {
    padding: 0;
  }

  .drip-lightbox .drip-content img.drip-image {
    margin-bottom: 20px;
  }

  .drip-lightbox .drip-content .drip-image-center-helper {
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  .drip-lightbox .drip-content img.drip-image {
    max-width: 245px;
    vertical-align: middle;
  }

  .drip-lightbox .drip-content a.drip-close {
    position: absolute;
    right: 25px;
    top: 25px;
  }

  .drip-lightbox .drip-content a.drip-close:hover {
    cursor: pointer;
  }

  /* === Content Subscribe Form === */

  .drip-lightbox form {
    margin: 0 !important;
    padding: 0 !important;
  }

  .drip-lightbox dl {
    display: block;
    margin: 0;
    padding: 0 0 5px 0;
  }

  .drip-lightbox dl dt {
    display: block;
    padding: 0 0 5px 0;
    /* font-size: 13px; */
    font-weight: bold;
  }

  .drip-lightbox dl.no-labels dt {
    display: none;
  }

  .drip-lightbox dl dd {
    display: block;
    padding: 0 0 8px 0;
  }

  .drip-lightbox .drip-text-field {
    margin: 0 !important;
    padding: 10px 12px !important;
    height: auto !important;
    width: 100% !important;
    color: #4F5362 !important;
    background-color: #fff !important;
    border: 1px solid #A8ACB9 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    -webkit-box-sizing: border-box !important;
       -moz-box-sizing: border-box !important;
        -ms-box-sizing: border-box !important;
            box-sizing: border-box !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
  }

  .drip-lightbox .drip-text-field:focus {
    border-color: #9398a9 !important;
    outline: 0;
    background-image: none;
    background-color: #fff !important;
  }

  .drip-lightbox.mobile .drip-text-field {
    font-size: 16px;
  }

  .drip-lightbox .drip-errors {
    padding: 5px 0 0 0;
    font-weight: normal;
    color: red;
  }

  .drip-lightbox .drip-submit-button {
    padding: 6px 26px !important;
    color: #ffffff !important;
    font-weight: bold !important;
    line-height: 1.6 !important;
    border: 0 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    cursor: pointer !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
    height: auto;
    transition: background 0.2s ease !important;
    -webkit-box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
       -moz-box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
            box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
  }

  .drip-lightbox .drip-submit-button:hover {
    background-image: none !important;
  }

  .drip-lightbox .drip-submit-button:active {
    background-image: none !important;
  }

  /* checkbox */

  .drip-lightbox input,
  .drip-lightbox textarea {
    display: block;
    box-shadow: none;
    position: relative;
    border: 1px solid #cccccc;
    outline: none;
    border-radius: 3px;
    font: inherit;
    color: #262626;
    padding: 12px 18px;
    transition: border-color 300ms;
    width: 100%;
  }

  .drip-lightbox .zenput--checkbox.hidden {
    margin-bottom: -8px;
    display: none;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] {
    height: 0;
    width: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label {
    font: inherit;
    font-size: 16px;
    line-height: 30px;
    color: #262626;
    cursor: pointer;
    white-space: normal;
    word-break: break-word;
    display: block;
    padding-left: 36px;
    position: relative;
    transition: color 300ms
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    content: "";
    display: block;
    background: #f5f5f5;
    width: 24px;
    height: 24px;
    position: absolute;
    top: 3px;
    left: 0;
    border-radius: 3px;
    border: 1px solid #cccccc;
    box-sizing: border-box;
    padding: 3px;
    transition: background 300ms ease-out, border-color 300ms;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    opacity: 0;
    width: 16px;
    display: block;
    fill: #cccccc;
    transition: opacity 300ms ease-out;
  }

  .drip-lightbox .zenput--checkbox .zenput__checkbox-label .zenput__checkbox-label__icon .octicon-dash {
    display: none;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label {
    color: #333 !important;
  }
  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    background-color: #ffffff;
    border-color: #a8acb9;
  }
  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    fill: #f9a82f !important;
    opacity: 1;
  }
  /* stylelint-enable */

</style><style type="text/css">
  /* === Form-Specific Styles === */
  /* stylelint-disable */

  #drip-108599 {
    background: #fff !important;
  }

  #drip-108599 .drip-content h3 {
    color: #f9a82f !important;
    font-size: 28px !important;
  }

  #drip-108599 .drip-submit-button {
    background-color: #f9a82f !important;
    font-size: 19px !important;
  }

  #drip-108599 .drip-submit-button:hover {
    background-color: #eda02d !important;
  }

  #drip-108599 .drip-submit-button:active {
    background-color: #e0972a !important;
  }

  #drip-108599 dl dt,
  #drip-108599 .drip-content .drip-description,
  #drip-108599 .drip-errors {
    font-size: 16px !important;
  }

  #drip-108599 .drip-text-field {
    font-size: 16px !important;
  }

  /* === Reset styles === */

  .drip-lightbox h1,
  .drip-lightbox h2,
  .drip-lightbox h3,
  .drip-lightbox div,
  .drip-lightbox dl,
  .drip-lightbox dt,
  .drip-lightbox dd,
  .drip-lightbox p,
  .drip-lightbox a,
  .drip-lightbox .drip-text-field,
  .drip-lightbox .drip-text-field:focus,
  .drip-lightbox .drip-submit-button {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    float: none;
    width: auto;
    background-image: none;
    letter-spacing: 0;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
    -webkit-text-shadow: none !important;
       -moz-text-shadow: none !important;
            text-shadow: none !important;
  }

  .drip-lightbox a {
    text-decoration: none;
    color: #f9a82f !important;
  }

  .drip-lightbox :focus {
    outline: 0;
  }

  .drip-lightbox input::-webkit-input-placeholder { /* WebKit browsers */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input::-moz-placeholder { /* Mozilla Firefox 19+ */
    color: #A8ACB9 !important;
  }
  .drip-lightbox input:-ms-input-placeholder { /* Internet Explorer 10+ */
    color: #A8ACB9 !important;
  }

  /* === Clearfix === */

  .drip-clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }
  * html .drip-clearfix             { zoom: 1; } /* IE6 */
  *:first-child+html .drip-clearfix { zoom: 1; } /* IE7 */

  /* === Backdrop === */

  .drip-backdrop {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 10000;
    background-color: #000;
    opacity: 0;
    -webkit-transition: opacity .3s linear;
       -moz-transition: opacity .3s linear;
         -o-transition: opacity .3s linear;
            transition: opacity .3s linear;
  }

  .drip-backdrop.drip-in {
    opacity: 0.2;
  }

  .drip-backdrop.drip-hidden {
    display: none;
  }

  /* === Main Container === */

  .drip-lightbox-wrapper * {
    box-sizing: content-box;
  }

  /* === Content === */

  .drip-lightbox .drip-content {
    margin: 0 0 0 -190px;
    padding: 0;
    position: fixed;
    width: 380px;
    top: -25%;
    left: 50%;
    font-size: 100%;
    z-index: 11000;
    color: #333;
    vertical-align: baseline;
    background-color: #ffffff;
    opacity: 0;
    -webkit-border-radius: 8px;
       -moz-border-radius: 8px;
            border-radius: 8px;
    -webkit-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
       -moz-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
            box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
    -webkit-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;
       -moz-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
         -o-transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
            transition: opacity .3s linear, top .3s ease-out, bottom 200ms ease-in;;
  }

  .drip-lightbox.drip-in .drip-content {
    top: 15%;
    opacity: 1;
  }

  .drip-lightbox.drip-hidden .drip-content {
    display: none;
  }

  .drip-lightbox.side-image .drip-content {
    margin-left: -325px;
    width: 650px;
  }

  .drip-lightbox.mobile .drip-content {
    margin: 0;
    width: 100%;
    left: 0;
    top: auto;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
  }

  .drip-lightbox.mobile.drip-in .drip-content {
    top: auto;
    bottom: 0;
  }

  .drip-lightbox.drip-scrollable .drip-content {
    overflow-y: scroll;
  }

  /* === Teaser === */

  .drip-lightbox .drip-header h2 {
    display: block;
    margin: 0 !important;
    padding: 12px 0 !important;
    font-size: 14px !important;
    line-height: 13px !important;
    font-weight: bold !important;
    color: #fff !important;
    letter-spacing: 0 !important;
  }

  /* === Panel === */

  .drip-lightbox .drip-content > div.drip-panel {
    padding: 25px;
    background-color: #fff;
    -webkit-border-radius: 6px;
       -moz-border-radius: 6px;
            border-radius: 6px;
  }

  /* === Powered By === */

  .drip-lightbox .drip-powered-by {
    padding: 8px;
    text-align: left;
    font-weight: normal;
    font-size: 10px;
    line-height: 16px;
    color: #A8ACB9;
    text-align: right;
    margin-right: 25px;
    text-transform: uppercase;
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .drip-lightbox .drip-powered-by a {
    color: #A8ACB9 !important;
    text-decoration: underline !important;
    margin-left: 6px;
  }

  /* === Content Sections === */

  .drip-lightbox.side-image .drip-form-aside {
    width: 245px;
    text-align: center;
  }

  .drip-lightbox.image-left .drip-form-main {
    margin-left: 270px;
  }

  .drip-lightbox.image-right .drip-form-main {
    margin-right: 270px;
  }

  .drip-lightbox.image-left .drip-form-aside {
    float: left;
  }

  .drip-lightbox.image-right .drip-form-aside {
    float: right;
  }

  @media screen and (max-width: 650px) {
    /* prevent overriding mobile class styles */
    .drip-lightbox.side-image:not(.mobile) .drip-content {
      margin-left: -190px;
      width: 380px;
    }

    .drip-lightbox.side-image .drip-form-main {
      margin-left: 0;
      margin-right: 0;
    }

    .drip-lightbox.side-image .drip-form-aside {
      display: none;
    }
  }

  /* === Content Headings & Paragraphs === */

  .drip-lightbox .drip-content h3 {
    display: block;
    margin: 0 20px 0 0 !important;
    padding: 0 0 15px 0 !important;
    line-height: 1.4 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #4477bd !important;
    clear: none !important;
  }

  .drip-lightbox .drip-content .drip-description {
    margin: 0;
    padding: 0 0 20px 0;
    line-height: 1.6;
    text-align: left;
  }

  .drip-lightbox .drip-content .drip-post-submission {
    padding: 0;
  }

  .drip-lightbox .drip-content .drip-description a {
    text-decoration: underline;
  }

  .drip-lightbox .drip-content .drip-description em {
    font-style: italic;
  }

  .drip-lightbox .drip-content .drip-description ul,
  .drip-lightbox .drip-content .drip-description ol {
    list-style-position: outside;
    margin: 8px 0 8px 30px;
  }

  .drip-lightbox .drip-content .drip-description ul li
  .drip-lightbox .drip-content .drip-description ol li {
    padding: 0;
  }

  .drip-lightbox .drip-content img.drip-image {
    margin-bottom: 20px;
  }

  .drip-lightbox .drip-content .drip-image-center-helper {
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  .drip-lightbox .drip-content img.drip-image {
    max-width: 245px;
    vertical-align: middle;
  }

  .drip-lightbox .drip-content a.drip-close {
    position: absolute;
    right: 25px;
    top: 25px;
  }

  .drip-lightbox .drip-content a.drip-close:hover {
    cursor: pointer;
  }

  /* === Content Subscribe Form === */

  .drip-lightbox form {
    margin: 0 !important;
    padding: 0 !important;
  }

  .drip-lightbox dl {
    display: block;
    margin: 0;
    padding: 0 0 5px 0;
  }

  .drip-lightbox dl dt {
    display: block;
    padding: 0 0 5px 0;
    /* font-size: 13px; */
    font-weight: bold;
  }

  .drip-lightbox dl.no-labels dt {
    display: none;
  }

  .drip-lightbox dl dd {
    display: block;
    padding: 0 0 8px 0;
  }

  .drip-lightbox .drip-text-field {
    margin: 0 !important;
    padding: 10px 12px !important;
    height: auto !important;
    width: 100% !important;
    color: #4F5362 !important;
    background-color: #fff !important;
    border: 1px solid #A8ACB9 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    -webkit-box-sizing: border-box !important;
       -moz-box-sizing: border-box !important;
        -ms-box-sizing: border-box !important;
            box-sizing: border-box !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
  }

  .drip-lightbox .drip-text-field:focus {
    border-color: #9398a9 !important;
    outline: 0;
    background-image: none;
    background-color: #fff !important;
  }

  .drip-lightbox.mobile .drip-text-field {
    font-size: 16px;
  }

  .drip-lightbox .drip-errors {
    padding: 5px 0 0 0;
    font-weight: normal;
    color: red;
  }

  .drip-lightbox .drip-submit-button {
    padding: 6px 26px !important;
    color: #ffffff !important;
    font-weight: bold !important;
    line-height: 1.6 !important;
    border: 0 !important;
    -webkit-border-radius: 3px !important;
       -moz-border-radius: 3px !important;
            border-radius: 3px !important;
    cursor: pointer !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
    height: auto;
    transition: background 0.2s ease !important;
    -webkit-box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
       -moz-box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
            box-shadow: 0px 2px 4px rgba(0,0,0,0.20);
  }

  .drip-lightbox .drip-submit-button:hover {
    background-image: none !important;
  }

  .drip-lightbox .drip-submit-button:active {
    background-image: none !important;
  }

  /* checkbox */

  .drip-lightbox input,
  .drip-lightbox textarea {
    display: block;
    box-shadow: none;
    position: relative;
    border: 1px solid #cccccc;
    outline: none;
    border-radius: 3px;
    font: inherit;
    color: #262626;
    padding: 12px 18px;
    transition: border-color 300ms;
    width: 100%;
  }

  .drip-lightbox .zenput--checkbox.hidden {
    margin-bottom: -8px;
    display: none;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] {
    height: 0;
    width: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label {
    font: inherit;
    font-size: 16px;
    line-height: 30px;
    color: #262626;
    cursor: pointer;
    white-space: normal;
    word-break: break-word;
    display: block;
    padding-left: 36px;
    position: relative;
    transition: color 300ms
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    content: "";
    display: block;
    background: #f5f5f5;
    width: 24px;
    height: 24px;
    position: absolute;
    top: 3px;
    left: 0;
    border-radius: 3px;
    border: 1px solid #cccccc;
    box-sizing: border-box;
    padding: 3px;
    transition: background 300ms ease-out, border-color 300ms;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"] ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    opacity: 0;
    width: 16px;
    display: block;
    fill: #cccccc;
    transition: opacity 300ms ease-out;
  }

  .drip-lightbox .zenput--checkbox .zenput__checkbox-label .zenput__checkbox-label__icon .octicon-dash {
    display: none;
  }

  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label {
    color: #333 !important;
  }
  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon {
    background-color: #ffffff;
    border-color: #a8acb9;
  }
  .drip-lightbox .zenput--checkbox input[type="checkbox"]:checked ~ .zenput__checkbox-label .zenput__checkbox-label__icon svg {
    fill: #f9a82f !important;
    opacity: 1;
  }
  /* stylelint-enable */

</style><link rel="stylesheet" href="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/OneSignalSDKStyles.css"></head>
<body data-gr-c-s-loaded="true">
<nav class="navbar fixed-top navbar-expand-lg navbar-dark flex-column">
<div class="container flex-row">
<a class="navbar-brand" href="https://realpython.com/">
<img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/real-python-logo.svg" class="d-inline-block align-top" alt="Real Python" height="40">
</a>
<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse" id="navbarSupportedContent">
<ul class="navbar-nav mr-2 flex-fill">
<li class="nav-item">
<a class="nav-link" href="https://realpython.com/start-here/">Start&nbsp;Here</a>
</li>
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdownLibrary" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
<span class="fa fa-graduation-cap"></span> Learn Python
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdownLibrary">
<a class="dropdown-item" href="https://realpython.com/">Python Tutorials</a>
<a class="dropdown-item" href="https://realpython.com/courses/">Video Courses</a>
<a class="dropdown-item" href="https://realpython.com/quizzes/">Interactive Quizzes</a>
<a class="dropdown-item" href="https://realpython.com/learning-paths/">Learning Paths</a>
<a class="dropdown-item" href="https://realpython.com/tutorials/all/">Browse Topics</a>
<a class="dropdown-item border-top" href="https://realpython.com/account/join/"><i class="fa fa-fw fa-star text-warning"></i> Unlock All Content</a>
</div>
</li>
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdownBooksCourses" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
Store
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdownBooksCourses">
<a class="dropdown-item" href="https://realpython.com/account/join/"><i class="fa fa-fw fa-star text-warning"></i> RP Membership</a>
<a class="dropdown-item" href="https://realpython.com/products/python-basics-book/">Python Basics Book</a>
<a class="dropdown-item" href="https://realpython.com/products/python-tricks-book/">Python Tricks Book</a>
<a class="dropdown-item" href="https://realpython.com/products/real-python-course/">The Real Python Course</a>
<a class="dropdown-item" href="https://realpython.com/products/managing-python-dependencies/">Managing Python Dependencies</a>
<a class="dropdown-item" href="https://realpython.com/products/sublime-python/">Sublime Text + Python Setup</a>
<a class="dropdown-item" href="https://realpython.com/products/pythonic-wallpapers/">Pythonic Wallpapers Pack</a>
<a class="dropdown-item" href="https://nerdlettering.com/" target="_blank">Python Mugs, T-Shirts, and More</a>
<a class="dropdown-item" href="https://www.pythonistacafe.com/" target="_blank">Pythonista Cafe Community</a>
<a class="dropdown-item border-top" href="https://realpython.com/products/">Browse All »</a>
</div>
</li>
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMore" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
More
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdownMore">
<a class="dropdown-item" href="https://realpython.com/newsletter/">Python Newsletter</a>
<a class="dropdown-item" href="https://www.pythonjobshq.com/" target="_blank">Python Job Board</a>
<a class="dropdown-item" href="https://realpython.com/team/">The RP Team</a>
<a class="dropdown-item" href="https://realpython.com/write-for-us/">Become a Tutorial Author</a>
<a class="dropdown-item" href="https://realpython.com/become-an-instructor/">Become a Video Instructor</a>
</div>
</li>
</ul>
<form class="form-inline my-2 my-lg-0 mr-2 flex-fill" action="/search" method="GET">
<input class="search-field form-control form-control-md mr-sm-1 mr-lg-2 w-100" type="search" placeholder="Search…" aria-label="Search" name="q">
</form>
<ul class="navbar-nav">
<li class="nav-item form-inline">
<a class="btn btn-sm btn-primary px-3" href="https://realpython.com/account/join/">Join</a>
</li>
<li class="nav-item">
<a class="btn text-light" href="https://realpython.com/account/login/">Sign‑In</a>
</li>
</ul>
</div>
</div>
</nav>
<div class="container main-content">
<div class="row justify-content-center">
<div class="col-md-11 col-lg-8 article">
<figure class="embed-responsive embed-responsive-16by9">
<img class="card-img-top m-0 p-0 embed-responsive-item rounded" style="object-fit: contain;" alt="Python Itertools" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/Itertools-in-Python-3-By-Example_Watermarked.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg&amp;w=480&amp;sig=3cf689c08083bbf39dd63f7f02b48fe63b9f3ccc 480w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg&amp;w=960&amp;sig=69902644d725213bdda71763bbe50d9895a7c86a 960w, https://files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg 1920w" sizes="75vw" width="1920" height="1080">
</figure>
<h1>Itertools in Python 3, By Example</h1>
<p class="mb-0">
<span class="text-muted">by <a class="text-muted" href="#author">David Amos</a>
<span class="ml-2 mr-1 fa fa-comments"></span><a class="text-muted" href="#reader-comments"><span class="disqus-comment-count" data-disqus-identifier="https://realpython.com/python-itertools/">28 Comments</span></a>
<span class="ml-2 fa fa-tags"></span>
<a href="https://realpython.com/tutorials/advanced/" class="badge badge-light text-muted">advanced</a>
<a href="https://realpython.com/tutorials/python/" class="badge badge-light text-muted">python</a>
</span></p><div class="d-flex flex-row justify-content-between my-2">
<div class="align-self-center">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check%20out%20this%20%23Python%20tutorial:%20Itertools%20in%20Python%203%2C%20By%20Example%20by%20@realpython&amp;url=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&amp;body=Check out this Python tutorial:%0A%0AItertools%20in%20Python%203%2C%20By%20Example%0A%0Ahttps%3A//realpython.com/python-itertools/" class="mr-1 badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
</div>
<p></p>
<div class="article-body">
<div class="bg-light sidebar-module sidebar-module-inset" id="toc">
<p class="h3 mb-2 text-muted">Table of Contents</p>
<div class="toc">
<ul>
<li><a href="#what-is-itertools-and-why-should-you-use-it">What Is Itertools and Why Should You Use It?</a></li>
<li><a href="#the-grouper-recipe">The grouper Recipe</a></li>
<li><a href="#et-tu-brute-force">Et tu, Brute Force?</a><ul>
<li><a href="#section-recap">Section Recap</a></li>
</ul>
</li>
<li><a href="#sequences-of-numbers">Sequences of Numbers</a><ul>
<li><a href="#evens-and-odds">Evens and Odds</a></li>
<li><a href="#recurrence-relations">Recurrence Relations</a></li>
<li><a href="#section-recap_1">Section Recap</a></li>
</ul>
</li>
<li><a href="#dealing-a-deck-of-cards">Dealing a Deck of Cards</a><ul>
<li><a href="#section-recap_2">Section Recap</a></li>
</ul>
</li>
<li><a href="#intermission-flattening-a-list-of-lists">Intermission: Flattening A List of Lists</a></li>
<li><a href="#analyzing-the-sp500">Analyzing the S&amp;P500</a><ul>
<li><a href="#maximum-gain-and-loss">Maximum Gain and Loss</a></li>
<li><a href="#longest-growth-streak">Longest Growth Streak</a></li>
<li><a href="#section-recap_3">Section Recap</a></li>
</ul>
</li>
<li><a href="#building-relay-teams-from-swimmer-data">Building Relay Teams From Swimmer Data</a></li>
<li><a href="#where-to-go-from-here">Where to Go From Here</a></li>
</ul>
</div>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:12.5%;"></div>
<div class="rpad" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"><a href="https://srv.realpython.net/click/505418019/?c=41484134757&amp;p=58946116052&amp;r=77520" rel="nofollow" target="_blank"><img style="max-width: 100%; max-height: 100%; width: 100%;" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/7bd2490cf846022a74121021fbdf7d50.png"></a></div>
</div>
</div>
<p>It has been called a <a href="https://more-itertools.readthedocs.io/en/latest/index.html">“gem”</a> and <a href="http://jmduke.com/posts/a-gentle-introduction-to-itertools/">“pretty much the coolest thing ever,”</a> and if you have not heard of it, then you are missing out on one of the greatest corners of the Python 3 standard library: <code>itertools</code>.</p>
<p>A handful of excellent resources exist for learning what functions are available in the <code>itertools</code> module. The <a href="https://docs.python.org/3/library/itertools.html">docs</a> themselves are a great place to start. So is <a href="https://pymotw.com/3/itertools/index.html">this post</a>.</p>
<p>The thing about <code>itertools</code>, though, is that it is not 
enough to just know the definitions of the functions it contains. The 
real power lies in composing these functions to create fast, 
memory-efficient, and good-looking code.</p>
<p>This article takes a different approach. Rather than introducing <code>itertools</code>
 to you one function at a time, you will construct practical examples 
designed to encourage you to “think iteratively.” In general, the 
examples will start simple and gradually increase in complexity.</p>
<p>A word of warning: this article is long and intended for the 
intermediate-to-advanced Python programmer. Before diving in, you should
 be confident using iterators and generators in Python 3, multiple 
assignment, and tuple unpacking. If you aren’t, or if you need to brush 
up on your knowledge, consider checking out the following before reading
 on:</p>
<ul>
<li><a href="https://dbader.org/blog/python-iterators">Python Iterators: A Step-By-Step Introduction</a></li>
<li><a href="https://realpython.com/introduction-to-python-generators/">Introduction to Python Generators</a></li>
<li>Chapter 6 of <a href="https://realpython.com/asins/1775093301">Python Tricks: The Book</a> by Dan Bader</li>
<li><a href="http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/">Multiple assignment and tuple unpacking improve Python code readability</a></li>
</ul>
<div class="alert alert-warning" role="alert"><p><strong>Free Bonus:</strong> <a href="https://realpython.com/bonus/itertools-cheatsheet/" class="alert-link" data-toggle="modal" data-target="#modal-itertools-cheatsheet" data-focus="false">Click here to get our itertools cheat sheet</a> that summarizes the techniques demonstrated in this tutorial.</p></div>
<p>All set? Let’s start the way any good journey should—with a question.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-4997" data-processed="true"></div><div id="waldo-tag-4996" data-processed="true" data-google-query-id="CKLyzuPEh-cCFZtMKwodqHII8w"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-4996'); });</script></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h2 id="what-is-itertools-and-why-should-you-use-it">What Is <code>Itertools</code> and Why Should You Use It?</h2>
<p>According to the <a href="https://docs.python.org/3/library/itertools.html"><code>itertools</code> docs</a>,
 it is a “module [that] implements a number of iterator building blocks 
inspired by constructs from APL, Haskell, and SML… Together, they form 
an ‘iterator algebra’ making it possible to construct specialized tools 
succinctly and efficiently in pure Python.”</p>
<p>Loosely speaking, this means that the functions in <code>itertools</code> “operate” on iterators to produce more complex iterators. Consider, for example, the <a href="https://docs.python.org/3/library/functions.html#zip">built-in <code>zip()</code> function</a>, which takes any number of iterables as arguments and returns an iterator over tuples of their corresponding elements:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]))</span>
<span class="go">[(1, 'a'), (2, 'b'), (3, 'c')]</span>
</pre></div>
<p>How, exactly, does <code>zip()</code> work?</p>
<p><code>[1, 2, 3]</code> and <code>['a', 'b', 'c']</code>, like all 
lists, are iterable, which means they can return their elements one at a
 time. Technically, any Python object that implements the <code>.__iter__()</code> or <code>.__getitem__()</code> methods is iterable. (See the <a href="https://docs.python.org/3/glossary.html#term-iterable">Python 3 docs glossary</a> for a more detailed explanation.)</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#iter"><code>iter()</code> built-in function</a>, when called on an iterable, returns an <a href="https://docs.python.org/3/library/stdtypes.html#typeiter">iterator object</a> for that iterable:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">iter</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="go">&lt;list_iterator object at 0x7fa80af0d898&gt;</span>
</pre></div>
<p>Under the hood, the <code>zip()</code> function works, in essence, by calling <code>iter()</code> on each of its arguments, then advancing each iterator returned by <code>iter()</code> with <code>next()</code> and aggregating the results into tuples. The iterator returned by <code>zip()</code> iterates over these tuples.</p>
<p><a href="https://docs.python.org/3/library/functions.html#map">The <code>map()</code> built-in function</a>
 is another “iterator operator” that, in its simplest form, applies a 
single-parameter function to each element of an iterable one element at a
 time:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="p">[</span><span class="s1">'abc'</span><span class="p">,</span> <span class="s1">'de'</span><span class="p">,</span> <span class="s1">'fghi'</span><span class="p">]))</span>
<span class="go">[3, 2, 4]</span>
</pre></div>
<p>The <code>map()</code> function works by calling <code>iter()</code> on its second argument, advancing this iterator with <code>next()</code> until the iterator is exhausted, and applying the function passed to its first argument to the value returned by <code>next()</code> at each step. In the above example, <code>len()</code> is called on each element of <code>['abc', 'de', 'fghi']</code> to return an iterator over the lengths of each string in the list.</p>
<p>Since <a href="https://docs.python.org/3/glossary.html#term-iterator">iterators are iterable</a>, you can compose <code>zip()</code> and <code>map()</code>
 to produce an iterator over combinations of elements in more than one 
iterable. For example, the following sums corresponding elements of two 
lists:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="nb">zip</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])))</span>
<span class="go">[5, 7, 9]</span>
</pre></div>
<p>This is what is meant by the functions in <code>itertools</code> forming an “iterator algebra.” <code>itertools</code>
 is best viewed as a collection of building blocks that can be combined 
to form specialized “data pipelines” like the one in the example above.</p>
<blockquote>
<p><strong>Historical Note:</strong> In Python 2, the built-in <a href="https://docs.python.org/2/library/functions.html#zip"><code>zip()</code></a> and <a href="https://docs.python.org/2/library/functions.html#map"><code>map()</code></a> functions do not return an iterator, but rather a list. To return an iterator, the <a href="https://docs.python.org/2/library/itertools.html#itertools.izip"><code>izip()</code></a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.imap"><code>imap()</code></a> functions of <code>itertools</code> must be used. In Python 3, <code>izip()</code> and <code>imap()</code> have been <a href="https://docs.python.org/3.0/whatsnew/3.0.html#views-and-iterators-instead-of-lists">removed from <code>itertools</code></a> and replaced the <code>zip()</code> and <code>map()</code> built-ins. So, in a way, if you have ever used <code>zip()</code> or <code>map()</code> in Python 3, you have already been using <code>itertools</code>!</p>
</blockquote>
<p>There are two main reasons why such an “iterator algebra” is useful: improved memory efficiency (via <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a>) and faster execuction time. To see this, consider the following problem:</p>
<blockquote>
<p>Given a list of values <code>inputs</code> and a positive integer <code>n</code>, write a function that splits <code>inputs</code> into groups of length <code>n</code>. For simplicity, assume that the length of the input list is divisible by <code>n</code>. For example, if <code>inputs = [1, 2, 3, 4, 5, 6]</code> and <code>n = 2</code>, your function should return <code>[(1, 2), (3, 4), (5, 6)]</code>.</p>
</blockquote>
<p>Taking a naive approach, you might write something like this:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">naive_grouper</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">num_groups</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span> <span class="o">//</span> <span class="n">n</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">n</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_groups</span><span class="p">)]</span>
</pre></div>
<p>When you test it, you see that it works as expected:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">naive_grouper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]</span>
</pre></div>
<p>What happens when you try to pass it a list with, say, 100 million 
elements? You will need a whole lot of available memory! Even if you 
have enough memory available, your program will hang for a while until 
the output list is populated.</p>
<p>To see this, store the following in a script called <code>naive.py</code>:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">naive_grouper</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">num_groups</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span> <span class="o">//</span> <span class="n">n</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">n</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_groups</span><span class="p">)]</span>


<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">naive_grouper</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100000000</span><span class="p">),</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
<p>From the console, you can use the <code>time</code> command (on UNIX systems) to measure memory usage and CPU user time. <strong>Make sure you have at least 5GB of free memory before executing the following:</strong></p>
<div class="highlight sh"><pre><span></span><span class="gp">$</span> <span class="nb">time</span> -f <span class="s2">"Memory used (kB): %M\nUser time (seconds): %U"</span> python3 naive.py
<span class="go">Memory used (kB): 4551872</span>
<span class="go">User time (seconds): 11.04</span>
</pre></div>
<blockquote>
<p><strong>Note:</strong> On Ubuntu, you may need to run <code>/usr/bin/time</code> instead of <code>time</code> for the above example to work.</p>
</blockquote>
<p>The <code>list</code> and <code>tuple</code> implementation in <code>naive_grouper()</code> requires approximately 4.5GB of memory to process <code>range(100000000)</code>. Working with iterators drastically improves this situation. Consider the following:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">better_grouper</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">inputs</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">iters</span><span class="p">)</span>
</pre></div>
<p>There’s a lot going on in this little function, so let’s break it down with a concrete example. The expression <code>[iters(inputs)] * n</code> creates a list of <code>n</code> references to the same iterator:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">nums</span><span class="p">)]</span> <span class="o">*</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">itr</span><span class="p">)</span> <span class="k">for</span> <span class="n">itr</span> <span class="ow">in</span> <span class="n">iters</span><span class="p">)</span>  <span class="c1"># IDs are the same.</span>
<span class="go">[139949748267160, 139949748267160]</span>
</pre></div>
<p>Next, <code>zip(*iters)</code> returns an iterator over pairs of corresponding elements of each iterator in <code>iters</code>. When the first element, <code>1</code>, is taken from the “first” iterator, the “second” iterator now starts at <code>2</code> since it is just a reference to the “first” iterator and has therefore been advanced one step. So, the first tuple produced by <code>zip()</code> is <code>(1, 2)</code>.</p>
<p>At this point, “both” iterators in <code>iters</code> start at <code>3</code>, so when <code>zip()</code> pulls <code>3</code> from the “first” iterator, it gets <code>4</code> from the “second” to produce the tuple <code>(3, 4)</code>. This process continues until <code>zip()</code> finally produces <code>(9, 10)</code> and “both” iterators in <code>iters</code> are exhausted:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">better_grouper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]</span>
</pre></div>
<p>The <code>better_grouper()</code> function is better for a couple of reasons. First, without the reference to the <code>len()</code> built-in, <code>better_grouper()</code> can take any iterable as an argument (even infinite iterators). Second, by returning an iterator rather than a list, <code>better_grouper()</code> can process enormous iterables without trouble and uses much less memory.</p>
<p>Store the following in a file called <code>better.py</code> and run it with <code>time</code> from the console again:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">better_grouper</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">inputs</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">iters</span><span class="p">)</span>


<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">better_grouper</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100000000</span><span class="p">),</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
<div class="highlight sh"><pre><span></span><span class="gp">$</span> <span class="nb">time</span> -f <span class="s2">"Memory used (kB): %M\nUser time (seconds): %U"</span> python3 better.py
<span class="go">Memory used (kB): 7224</span>
<span class="go">User time (seconds): 2.48</span>
</pre></div>
<p>That’s a whopping 630 times less memory used than <code>naive.py</code> in less than a quarter of the time!</p>
<p>Now that you’ve seen what <code>itertools</code> is (“iterator 
algebra”) and why you should use it (improved memory efficiency and 
faster execution time), let’s take a look at how to take <code>better_grouper()</code> to the next level with <code>itertools</code>.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-4999" data-processed="true"></div><div id="waldo-tag-4998" data-processed="true" data-google-query-id="COLV8OHEh-cCFUSIaAodqTgMdQ"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-4998'); });</script></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h2 id="the-grouper-recipe">The <code>grouper</code> Recipe</h2>
<p>The problem with <code>better_grouper()</code> is that it doesn’t 
handle situations where the value passed to the second argument isn’t a 
factor of the length of the iterable in the first argument:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">better_grouper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="go">[(1, 2, 3, 4), (5, 6, 7, 8)]</span>
</pre></div>
<p>The elements 9 and 10 are missing from the grouped output. This happens because <code>zip()</code>
 stops aggregating elements once the shortest iterable passed to it is 
exhausted. It would make more sense to return a third group containing 9
 and 10.</p>
<p>To do this, you can use <code>itertools.zip_longest()</code>. This function accepts any number of iterables as arguments and a <code>fillvalue</code> keyword argument that defaults to <code>None</code>. The easiest way to get a sense of the difference between <code>zip()</code> and <code>zip_longest()</code> is to look at some example output:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">itertools</span> <span class="k">as</span> <span class="nn">it</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
<span class="go">[(1, 'a'), (2, 'b'), (3, 'c')]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">zip_longest</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
<span class="go">[(1, 'a'), (2, 'b'), (3, 'c'), (4, None), (5, None)]</span>
</pre></div>
<p>With this in mind, replace <code>zip()</code> in <code>better_grouper()</code> with <code>zip_longest()</code>:</p>
<div class="highlight python"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span> <span class="k">as</span> <span class="nn">it</span>


<span class="k">def</span> <span class="nf">grouper</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">inputs</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">zip_longest</span><span class="p">(</span><span class="o">*</span><span class="n">iters</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="n">fillvalue</span><span class="p">)</span>
</pre></div>
<p>Now you get a better result:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">grouper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">4</span><span class="p">)))</span>
<span class="go">[(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, None, None)]</span>
</pre></div>
<p>The <code>grouper()</code> function can be found in the <a href="https://docs.python.org/3.6/library/itertools.html#itertools-recipes">Recipes section</a> of the <code>itertools</code> docs. The recipes are an excellent source of inspiration for ways to use <code>itertools</code> to your advantage.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note</strong>: From this point forward, the line <code>import itertools as it</code> will not be included at the beginning of examples. All <code>itertools</code> methods in code examples are prefaced with <code>it.</code> The module import is implied.</p>
<p>If you get a <code>NameError: name 'itertools' is not defined</code> or a <code>NameError: name 'it' is not defined</code> exception when running one of the examples in this tutorial you’ll need to import the <code>itertools</code> module first.</p>
</div>
<h2 id="et-tu-brute-force">Et tu, Brute Force?</h2>
<p>Here’s a common interview-style problem:</p>
<blockquote>
<p>You have three $20 dollar bills, five $10 dollar bills, two $5 dollar
 bills, and five $1 dollar bills. How many ways can you make change for a
 $100 dollar bill?</p>
</blockquote>
<p>To <a href="https://en.wikipedia.org/wiki/Brute-force_search">“brute force”</a>
 this problem, you just start listing off the ways there are to choose 
one bill from your wallet, check whether any of these makes change for 
$100, then list the ways to pick two bills from your wallet, check 
again, and so on and so forth.</p>
<p>But you are a programmer, so naturally you want to automate this process.</p>
<p>First, create a list of the bills you have in your wallet:</p>
<div class="highlight python"><pre><span></span><span class="n">bills</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>
<p>A choice of <em>k</em> things from a set of <em>n</em> things is called a <a href="https://en.wikipedia.org/wiki/Combination"><strong>combination</strong></a>, and <code>itertools</code> has your back here. The <code>itertools.combinations()</code> function takes two arguments—an iterable <code>inputs</code> and a positive integer <code>n</code>—and produces an iterator over tuples of all combinations of <code>n</code> elements in <code>inputs</code>.</p>
<p>For example, to list the combinations of three bills in your wallet, just do:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">bills</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="go"> [(20, 20, 20), (20, 20, 10), (20, 20, 10), ... ]</span>
</pre></div>
<p>To solve the problem, you can loop over the positive integers from 1 to <code>len(bills)</code>, then check which combinations of each size add up to $100:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">makes_100</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bills</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">combination</span> <span class="ow">in</span> <span class="n">it</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">bills</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
<span class="gp">... </span>        <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">combination</span><span class="p">)</span> <span class="o">==</span> <span class="mi">100</span><span class="p">:</span>
<span class="gp">... </span>            <span class="n">makes_100</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">combination</span><span class="p">)</span>
</pre></div>
<p>If you print out <code>makes_100</code>, you will notice there are a 
lot of repeated combinations. This makes sense because you can make 
change for $100 with three $20 dollar bills and four $10 bills, but <code>combinations()</code>
 does this with the first four $10 dollars bills in your wallet; the 
first, third, fourth and fifth $10 dollar bills; the first, second, 
fourth and fifth $10 bills; and so on.</p>
<p>To remove duplicates from <code>makes_100</code>, you can convert it to a <code>set</code>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">set</span><span class="p">(</span><span class="n">makes_100</span><span class="p">)</span>
<span class="go">{(20, 20, 10, 10, 10, 10, 10, 5, 1, 1, 1, 1, 1),</span>
<span class="go"> (20, 20, 10, 10, 10, 10, 10, 5, 5),</span>
<span class="go"> (20, 20, 20, 10, 10, 10, 5, 1, 1, 1, 1, 1),</span>
<span class="go"> (20, 20, 20, 10, 10, 10, 5, 5),</span>
<span class="go"> (20, 20, 20, 10, 10, 10, 10)}</span>
</pre></div>
<p>So, there are five ways to make change for a $100 bill with the bills you have in your wallet.</p>
<p>Here’s a variation on the same problem:</p>
<blockquote>
<p>How many ways are there to make change for a $100 bill using any number of $50, $20, $10, $5, and $1 dollar bills?</p>
</blockquote>
<p>In this case, you don’t have a pre-set collection of bills, so you 
need a way to generate all possible combinations using any number of 
bills. For this, you’ll need the <code>itertools.combinations_with_replacement()</code> function.</p>
<p>It works just like <code>combinations()</code>, accepting an iterable <code>inputs</code> and a positive integer <code>n</code>, and returns an iterator over <code>n</code>-tuples of elements from <code>inputs</code>. The difference is that <code>combinations_with_replacement()</code> allows elements to be repeated in the tuples it returns.</p>
<p>For example:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">combinations_with_replacement</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[(1, 1), (1, 2), (2, 2)]</span>
</pre></div>
<p>Compare that to <code>combinations()</code>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">combinations</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[(1, 2)]</span>
</pre></div>
<p>Here’s what the solution to the revised problem looks like:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">bills</span> <span class="o">=</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">make_100</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">101</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">combination</span> <span class="ow">in</span> <span class="n">it</span><span class="o">.</span><span class="n">combinations_with_replacement</span><span class="p">(</span><span class="n">bills</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
<span class="gp">... </span>        <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">combination</span><span class="p">)</span> <span class="o">==</span> <span class="mi">100</span><span class="p">:</span>
<span class="gp">... </span>            <span class="n">makes_100</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">combination</span><span class="p">)</span>
</pre></div>
<p>In this case, you do not need to remove any duplicates since <code>combinations_with_replacement()</code> won’t produce any:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">makes_100</span><span class="p">)</span>
<span class="go">343</span>
</pre></div>
<p>If you run the above solution, you may notice that it takes a while 
for the output to display. That is because it has to process 96,560,645 
combinations!</p>
<p>Another “brute force” <code>itertools</code> function is <code>permutations()</code>, which accepts a single iterable and produces all possible permutations (rearrangements) of its elements:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">permutations</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]))</span>
<span class="go">[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'),</span>
<span class="go"> ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]</span>
</pre></div>
<p>Any iterable of three elements will have six permutations, and the 
number of permutations of longer iterables grows extremely fast. In 
fact, an iterable of length <em>n</em> has <em>n!</em> permutations, where</p>
<p><a href="https://files.realpython.com/media/n_factorial.ac839fb0429e.png" target="_blank"><img class="img-fluid mx-auto d-block w-66" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/n_factorial.png" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/n_factorial.ac839fb0429e.png&amp;w=357&amp;sig=033cbe7d7484143bd5901eab069d56e0e1fb3e54 357w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/n_factorial.ac839fb0429e.png&amp;w=714&amp;sig=b5a6ed28b7343b5fcecd4265a0d681dd769f2049 714w, https://files.realpython.com/media/n_factorial.ac839fb0429e.png 1428w" sizes="75vw" alt="Definition of a factorial" width="1428" height="83"></a></p>
<p>To put this in perspective, here’s a table of these numbers for <em>n = 1</em> to <em>n = 10</em>:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th><em>n</em></th>
<th><em>n!</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td>24</td>
</tr>
<tr>
<td>5</td>
<td>120</td>
</tr>
<tr>
<td>6</td>
<td>720</td>
</tr>
<tr>
<td>7</td>
<td>5,040</td>
</tr>
<tr>
<td>8</td>
<td>40,320</td>
</tr>
<tr>
<td>9</td>
<td>362,880</td>
</tr>
<tr>
<td>10</td>
<td>3,628,800</td>
</tr>
</tbody>
</table>
</div>
<p>The phenomenon of just a few inputs producing a large number of outcomes is called a <a href="https://en.wikipedia.org/wiki/Combinatorial_explosion">combinatorial explosion</a> and is something to keep in mind when working with <code>combinations()</code>, <code>combinations_with_replacement()</code>, and <code>permutations()</code>.</p>
<p>It is usually best to avoid brute force algorithms, although there 
are times you may need to use one (for example, if the correctness of 
the algorithm is critical, or every possible outcome <em>must</em> be considered). In that case, <code>itertools</code> has you covered.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5001" data-processed="true"></div><div id="waldo-tag-5000" data-processed="true" data-google-query-id="CJSfgePEh-cCFcVgKwodXWQL1g"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-5000'); });</script></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="section-recap">Section Recap</h3>
<p>In this section you met three <code>itertools</code> functions: <code>combinations()</code>, <code>combinations_with_replacement()</code>, and <code>permutations()</code>.</p>
<p>Let’s review these functions before moving on:</p>
<h4 id="itertoolscombinations-example"><code>itertools.combinations</code> Example</h4>
<blockquote>
<p><code>combinations(iterable, n)</code></p>
<p>Return successive n-length combinations of elements in the iterable.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">combinations</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">(1, 2), (1, 3), (2, 3)</span>
</pre></div>
<h4 id="itertoolscombinations_with_replacement-example"><code>itertools.combinations_with_replacement</code> Example</h4>
<blockquote>
<p><code>combinations_with_replacement(iterable, n)</code></p>
<p>Return successive n-length combinations of elements in the iterable allowing individual elements to have successive repeats.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">combinations_with_replacement</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">(1, 1), (1, 2), (2, 2)</span>
</pre></div>
<h4 id="itertoolspermutations-example"><code>itertools.permutations</code> Example</h4>
<blockquote>
<p><code>permutations(iterable, n=None)</code></p>
<p>Return successive n-length permutations of elements in the iterable.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">permutations</span><span class="p">(</span><span class="s1">'abc'</span><span class="p">)</span>
<span class="go">('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'),</span>
<span class="go">('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')</span>
</pre></div>
<h2 id="sequences-of-numbers">Sequences of Numbers</h2>
<p>With <code>itertools</code>, you can easily generate iterators over 
infinite sequences. In this section, you will explore numeric sequences,
 but the tools and techniques seen here are by no means limited to 
numbers.</p>
<h3 id="evens-and-odds">Evens and Odds</h3>
<p>For the first example, you will create a pair of iterators over even and odd integers <em>without explicitly doing any arithmetic.</em> Before diving in, let’s look at an arithmetic solution using generators:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">evens</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Generate even integers, starting with 0."""</span>
<span class="gp">... </span>    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="gp">... </span>    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">yield</span> <span class="n">n</span>
<span class="gp">... </span>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">2</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">evens</span> <span class="o">=</span> <span class="n">evens</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">evens</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0, 2, 4, 6, 8]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">odds</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Generate odd integers, starting with 1."""</span>
<span class="gp">... </span>    <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="gp">... </span>    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">yield</span> <span class="n">n</span>
<span class="gp">... </span>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">2</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">odds</span> <span class="o">=</span> <span class="n">odds</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">odds</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[1, 3, 5, 7, 9]</span>
</pre></div>
<p>That is pretty straightforward, but with <code>itertools</code> you can do this much more compactly. The function you need is <code>itertools.count()</code>, which does exactly what it sounds like: it counts, starting by default with the number 0.</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">counter</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0, 1, 2, 3, 4]</span>
</pre></div>
<p>You can start counting from any number you like by setting the <code>start</code> keyword argument, which defaults to 0. You can even set a <code>step</code> keyword argument to determine the interval between numbers returned from <code>count()</code>—this defaults to 1.</p>
<p>With <code>count()</code>, iterators over even and odd integers become literal one-liners:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">evens</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">step</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">evens</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0, 2, 4, 6, 8]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">odds</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">odds</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[1, 3, 5, 7, 9]</span>
</pre></div>
<p><a href="https://docs.python.org/3.1/whatsnew/3.1.html#new-improved-and-deprecated-modules">Ever since Python 3.1</a>, the <code>count()</code> function also accepts non-integer arguments:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">count_with_floats</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">count_with_floats</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0.5, 1.25, 2.0, 2.75, 3.5]</span>
</pre></div>
<p>You can even pass it negative numbers:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">negative_count</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">start</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">step</span><span class="o">=-</span><span class="mf">0.5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">negative_count</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[-1, -1.5, -2.0, -2.5, -3.0]</span>
</pre></div>
<p>In some ways, <code>count()</code> is similar to the built-in <code>range()</code> function, but <code>count()</code>
 always returns an infinite sequence. You might wonder what good an 
infinite sequence is since it’s impossible to iterate over completely. 
That is a valid question, and I admit the first time I was introduced to
 infinite iterators, I too didn’t quite see the point.</p>
<p>The example that made me realize the power of the infinite iterator was the following, which emulates the behavior of the <a href="https://docs.python.org/3/library/functions.html#enumerate">built-in <code>enumerate()</code> function</a>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(),</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]))</span>
<span class="go">[(0, 'a'), (1, 'b'), (2, 'c')]</span>
</pre></div>
<p>It is a simple example, but think about it: you just enumerated a list without a <code>for</code> loop and without knowing the length of the list ahead of time.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5003" data-processed="true"></div><div id="waldo-tag-5002" data-processed="true" data-google-query-id="CN6-wurEh-cCFVYPtwAdd0gI_w"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="recurrence-relations">Recurrence Relations</h3>
<p>A <a href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a>
 is a way of describing a sequence of numbers with a recursive formula. 
One of the best-known recurrence relations is the one that describes the
 <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci sequence</a>.</p>
<p>The Fibonacci sequence is the sequence <code>0, 1, 1, 2, 3, 5, 8, 13, ...</code>.
 It starts with 0 and 1, and each subsequent number in the sequence is 
the sum of the previous two. The numbers in this sequence are called the
 Fibonacci numbers. In mathematical notation, the recurrence relation 
describing the <em>n</em>-th Fibonacci number looks like this:</p>
<p><a href="https://files.realpython.com/media/fibonacci.cf3bafbe6578.png" target="_blank"><img class="img-fluid mx-auto d-block w-66" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/fibonacci.png" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/fibonacci.cf3bafbe6578.png&amp;w=317&amp;sig=07442b8a8d97708f85c02d86a5f5f82f842f4ba6 317w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/fibonacci.cf3bafbe6578.png&amp;w=634&amp;sig=af1e3181c401965b26e185c16808dbb2513b4fe4 634w, https://files.realpython.com/media/fibonacci.cf3bafbe6578.png 1269w" sizes="75vw" alt="Fibonacci Recurrence Relation" width="1269" height="73"></a></p>
<blockquote>
<p><strong>Note:</strong> If you search Google, you will find a host of 
implementations of these numbers in Python. You can find a recursive 
function that produces them in the <a href="https://realpython.com/python-thinking-recursively/#naive-recursion-is-naive">Thinking Recursively in Python</a> article here on Real Python.</p>
</blockquote>
<p>It is common to see the Fibonacci sequence produced with a generator:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">fibs</span><span class="p">():</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">a</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</pre></div>
<p>The recurrence relation describing the Fibonacci numbers is called a <em>second order recurrence relation</em> because, to calculate the next number in the sequence, you need to look back two numbers behind it.</p>
<p>In general, second order recurrence relations have the form:</p>
<p><a href="https://files.realpython.com/media/second_order.b210039d7890.png" target="_blank"><img class="img-fluid mx-auto d-block w-50" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/second_order.png" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/second_order.b210039d7890.png&amp;w=231&amp;sig=3e0bb540bde0f57fcc1ef410531bcdc44b92ba2a 231w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/second_order.b210039d7890.png&amp;w=463&amp;sig=86c456f8cd432271b8b8981d4c9af498908fcea1 463w, https://files.realpython.com/media/second_order.b210039d7890.png 926w" sizes="75vw" alt="Second Order Recurrence Relation" width="926" height="76"></a></p>
<p>Here, <em>P</em>, <em>Q</em>, and <em>R</em> are constants. To generate the sequence, you need two initial values. For the Fibonacci numbers, <em>P</em> = <em>Q</em> = 1, <em>R</em> = 0, and the initial values are 0 and 1.</p>
<p>As you might guess, a <em>first order recurrence relation</em> has the following form:</p>
<p><a href="https://files.realpython.com/media/first_order.fca566e6fd61.png" target="_blank"><img class="img-fluid mx-auto d-block w-33" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/first_order.png" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/first_order.fca566e6fd61.png&amp;w=147&amp;sig=0c3f1b4a20cce6ecad62e653c7818ec15a96f011 147w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/first_order.fca566e6fd61.png&amp;w=294&amp;sig=b5ad7627e444a83f72cc829c0ba4847021debb1f 294w, https://files.realpython.com/media/first_order.fca566e6fd61.png 589w" sizes="75vw" alt="First Order Recurrence Relation" width="589" height="76"></a></p>
<p>There are countless sequences of numbers that can be described by 
first and second order recurrence relations. For example, the positive 
integers can be described as a first order recurrence relation with <em>P</em> = <em>Q</em> = 1 and initial value 1. For the even integers, take <em>P</em> = 1 and <em>Q</em> = 2 with initial value 0.</p>
<p>In this section, you will construct functions for producing <em>any</em> sequence whose values can be described with a first or second order recurrence relation.</p>
<h4 id="first-order-recurrence-relations">First Order Recurrence Relations</h4>
<p>You’ve already seen how <code>count()</code> can generate the 
sequence of non-negative integers, the even integers, and the odd 
integers. You can also use it to generate the sequence <em>3n = 0, 3, 6, 9, 12, …</em> and <em>4n = 0, 4, 8, 12, 16, …</em>.</p>
<div class="highlight python"><pre><span></span><span class="n">count_by_three</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">step</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">count_by_four</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">step</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</pre></div>
<p>In fact, <code>count()</code> can produce sequences of multiples of 
any number you wish. These sequences can be described with first-order 
recurrence relations. For example, to generate the sequence of multiples
 of some number <em>n</em>, just take <em>P</em> = 1, <em>Q</em> = <em>n</em>, and initial value 0.</p>
<p>Another easy example of a first-order recurrence relation is the constant sequence <em>n, n, n, n, n…</em>, where <em>n</em> is any value you’d like. For this sequence, set <em>P</em> = 1 and <em>Q</em> = 0 with initial value <em>n</em>. <code>itertools</code> provides an easy way to implement this sequence as well, with the <code>repeat()</code> function:</p>
<div class="highlight python"><pre><span></span><span class="n">all_ones</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 1, 1, 1, 1, ...</span>
<span class="n">all_twos</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 2, 2, 2, 2, ...</span>
</pre></div>
<p>If you need a finite sequence of repeated values, you can set a 
stopping point by passing a positive integer as a second argument:</p>
<div class="highlight python"><pre><span></span><span class="n">five_ones</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1"># 1, 1, 1, 1, 1</span>
<span class="n">three_fours</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># 4, 4, 4</span>
</pre></div>
<p>What may not be quite as obvious is that the sequence <code>1, -1, 1, -1, 1, -1, ...</code> of alternating 1s and -1s can also be described by a first order recurrence relation. Just take <em>P</em> = -1, <em>Q</em> = 0, and initial value 1.</p>
<p>There’s an easy way to generate this sequence with the <code>itertools.cycle()</code> function. This function takes an iterable <code>inputs</code> as an argument and returns an infinite iterator over the values in <code>inputs</code> that returns to the beginning once the end of <code>inputs</code> is reached. So, to produce the alternating sequence of 1s and -1s, you could do this:</p>
<div class="highlight python"><pre><span></span><span class="n">alternating_ones</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">cycle</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 1, -1, 1, -1, 1, -1, ...</span>
</pre></div>
<p>The goal of this section, though, is to produce a single function that can generate <em>any</em> first order recurrence relation—just pass it <em>P</em>, <em>Q</em>, and an initial value. One way to do this is with <code>itertools.accumulate()</code>.</p>
<p>The <code>accumulate()</code> function takes two arguments—an iterable <code>inputs</code> and a <strong>binary function</strong> <code>func</code> (that is, a function with exactly two inputs)—and returns an iterator over accumulated results of applying <code>func</code> to elements of <code>inputs</code>. It is roughly equivalent to the following generator:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">accumulate</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
    <span class="n">itr</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
    <span class="n">prev</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">itr</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">cur</span> <span class="ow">in</span> <span class="n">itr</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">prev</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">cur</span><span class="p">)</span>
</pre></div>
<p>For example:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">operator</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">operator</span><span class="o">.</span><span class="n">add</span><span class="p">))</span>
<span class="go">[1, 3, 6, 10, 15]</span>
</pre></div>
<p>The first value in the iterator returned by <code>accumulate()</code> is always the first value in the input sequence. In the above example, this is 1—the first value in <code>[1, 2, 3, 4, 5]</code>.</p>
<p>The next value in the output iterator is the sum of the first two elements of the input sequence: <code>add(1, 2) = 3</code>. To produce the next value, <code>accumulate()</code> takes the result of <code>add(1, 2)</code> and adds this to the third value in the input sequence:</p>
<div class="highlight"><pre><span></span>add(3, 3) = add(add(1, 2), 3) = 6
</pre></div>
<p>The fourth value produced by <code>accumulate()</code> is <code>add(add(add(1, 2), 3), 4) = 10</code>, and so on.</p>
<p>The second argument of <code>accumulate()</code> defaults to <code>operator.add()</code>, so the previous example can be simplified to:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
<span class="go">[1, 3, 6, 10, 15]</span>
</pre></div>
<p>Passing the built-in <code>min()</code> to <code>accumulate()</code> will keep track of a running minimum:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="nb">min</span><span class="p">))</span>
<span class="go">[9, 9, 9, 5, 5, 5, 2, 2]</span>
</pre></div>
<p>More complex functions can be passed to <code>accumulate()</code> with <code>lambda</code> expressions:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[1, 1.5, 2.25, 3.125, 4.0625]</span>
</pre></div>
<p>The order of the arguments in the binary function passed to <code>accumulate()</code>
 is important. The first argument is always the previously accumulated 
result and the second argument is always the next element of the input 
iterable. For example, consider the difference in output of the 
following expressions:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">))</span>
<span class="go">[1, -1, -4, -8, -13]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="p">))</span>
<span class="go">[1, 1, 2, 2, 3]</span>
</pre></div>
<p>To model a recurrence relation, you can just ignore the second argument of the binary function passed to <code>accumulate()</code>. That is, given values <code>p</code>, <code>q</code>, and <code>s</code>, <code>lambda x, _: p*s + q</code> will return the value following <code>x</code> in the recurrence relation defined by <em>sᵢ</em> = <em>Psᵢ₋₁</em> + <em>Q</em>.</p>
<p>In order for <code>accumulate()</code> to iterate over the resulting 
recurrence relation, you need to pass to it an infinite sequence with 
the right initial value. It doesn’t matter what the rest of the values 
in the sequence are, as long as the initial value is the initial value 
of the recurrence relation. You can do this is with <code>repeat()</code>:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">first_order</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">initial_val</span><span class="p">):</span>
    <span class="sd">"""Return sequence defined by s(n) = p * s(n-1) + q."""</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">initial_val</span><span class="p">),</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="n">p</span><span class="o">*</span><span class="n">s</span> <span class="o">+</span> <span class="n">q</span><span class="p">)</span>
</pre></div>
<p>Using <code>first_order()</code>, you can build the sequences from above as follows:</p>
<div class="highlight python"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">evens</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">evens</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">odds</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">odds</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">count_by_threes</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">count_by_threes</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">count_by_fours</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">count_by_fours</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">all_ones</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">all_ones</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">all_twos</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">all_twos</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">alternating_ones</span> <span class="o">=</span> <span class="n">first_order</span><span class="p">(</span><span class="n">p</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">initial_val</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">alternating_ones</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>
<h4 id="second-order-recurrence-relations">Second Order Recurrence Relations</h4>
<p>Generating sequences described by second order recurrence relations, 
like the Fibonacci sequence, can be accomplished using a similar 
technique as the one used for first order recurrence relations.</p>
<p>The difference here is that you need to create an intermediate 
sequence of tuples that keep track of the previous two elements of the 
sequence, and then <code>map()</code> each of these tuples to their first component to get the final sequence.</p>
<p>Here’s what it looks like:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">second_order</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">initial_values</span><span class="p">):</span>
    <span class="sd">"""Return sequence defined by s(n) = p * s(n-1) + q * s(n-2) + r."""</span>
    <span class="n">intermediate</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">accumulate</span><span class="p">(</span>
        <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">initial_values</span><span class="p">),</span>
        <span class="k">lambda</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="o">*</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="o">*</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">intermediate</span><span class="p">)</span>
</pre></div>
<p>Using <code>second_order()</code>, you can generate the Fibonacci sequence like this:</p>
<div class="highlight python"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">fibs</span> <span class="o">=</span> <span class="n">second_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_values</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">fibs</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
</pre></div>
<p>Other sequences can be easily generated by changing the values of <code>p</code>, <code>q</code>, and <code>r</code>. For example, the <a href="https://en.wikipedia.org/wiki/Pell_number">Pell numbers</a> and the <a href="https://en.wikipedia.org/wiki/Lucas_number">Lucas numbers</a> can be generated as follows:</p>
<div class="highlight python"><pre><span></span><span class="n">pell</span> <span class="o">=</span> <span class="n">second_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_values</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">pell</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">lucas</span> <span class="o">=</span> <span class="n">second_order</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_values</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">lucas</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
</pre></div>
<p>You can even generate the alternating Fibonacci numbers:</p>
<div class="highlight python"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">alt_fibs</span> <span class="o">=</span> <span class="n">second_order</span><span class="p">(</span><span class="n">p</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_values</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">alt_fibs</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
<span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</pre></div>
<p>This is all really cool if you are a giant math nerd like I am, but step back for a second and compare <code>second_order()</code> to the <code>fibs()</code> generator from the beginning of this section. Which one is easier to understand?</p>
<p>This is a valuable lesson. The <code>accumulate()</code> function is a
 powerful tool to have in your toolkit, but there are times when using 
it could mean sacrificing clarity and readability.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5005" data-processed="true"></div><div id="waldo-tag-5004" data-processed="true" data-google-query-id="CIzlmOfEh-cCFdgkaAodQVkHUQ"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="section-recap_1">Section Recap</h3>
<p>You saw several <code>itertools</code> function in this section. Let’s review those now.</p>
<h4 id="itertoolscount-example"><code>itertools.count</code> Example</h4>
<blockquote>
<p><code>count(start=0, step=1)</code></p>
<p>Return a count object whose .<code>__next__()</code> method returns consecutive values.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">count</span><span class="p">()</span>
<span class="go">0, 1, 2, 3, 4, ...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">count</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="go">1, 3, 5, 7, 9, ...</span>
</pre></div>
<h4 id="itertoolsrepeat-example"><code>itertools.repeat</code> Example</h4>
<blockquote>
<p><code>repeat(object, times=1)</code></p>
<p>Create an iterator which returns the object for the specified number of times. If not specified, returns the object endlessly.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">repeat</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="go">2, 2, 2, 2, 2 ...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">repeat</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1"># Stops after 5 repititions.</span>
<span class="go">2, 2, 2, 2, 2</span>
</pre></div>
<h4 id="itertoolscycle-example"><code>itertools.cycle</code> Example</h4>
<blockquote>
<p><code>cycle(iterable)</code></p>
<p>Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cycle</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">])</span>
<span class="go">a, b, c, a, b, c, a, ...</span>
</pre></div>
<h4 id="itertools-accumulate-example"><code>itertools accumulate</code> Example</h4>
<blockquote>
<p><code>accumulate(iterable, func=operator.add)</code></p>
<p>Return series of accumulated sums (or other binary function results).</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">accumulate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="go">1, 3, 6</span>
</pre></div>
<p>Alright, let’s take a break from the math and have some fun with cards.</p>
<h2 id="dealing-a-deck-of-cards">Dealing a Deck of Cards</h2>
<p>Suppose you are building a Poker app. You’ll need a deck of cards. 
You might start by defining a list of ranks (ace, king, queen, jack, 10,
 9, and so on) and a list of suits (hearts, diamonds, clubs, and 
spades):</p>
<div class="highlight python"><pre><span></span><span class="n">ranks</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'K'</span><span class="p">,</span> <span class="s1">'Q'</span><span class="p">,</span> <span class="s1">'J'</span><span class="p">,</span> <span class="s1">'10'</span><span class="p">,</span> <span class="s1">'9'</span><span class="p">,</span> <span class="s1">'8'</span><span class="p">,</span> <span class="s1">'7'</span><span class="p">,</span> <span class="s1">'6'</span><span class="p">,</span> <span class="s1">'5'</span><span class="p">,</span> <span class="s1">'4'</span><span class="p">,</span> <span class="s1">'3'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">]</span>
<span class="n">suits</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'H'</span><span class="p">,</span> <span class="s1">'D'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="s1">'S'</span><span class="p">]</span>
</pre></div>
<p>You could represent a card as a tuple whose first element is a rank 
and second element is a suit. A deck of cards would be a collection of 
such tuples. The deck should act like the real thing, so it makes sense 
to define a generator that yields cards one at a time and becomes 
exhausted once all the cards are dealt.</p>
<p>One way to achieve this is to write a generator with a nested <code>for</code> loop over <code>ranks</code> and <code>suits</code>:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">cards</span><span class="p">():</span>
    <span class="sd">"""Return a generator that yields playing cards."""</span>
    <span class="k">for</span> <span class="n">rank</span> <span class="ow">in</span> <span class="n">ranks</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">suit</span> <span class="ow">in</span> <span class="n">suits</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">rank</span><span class="p">,</span> <span class="n">suit</span>
</pre></div>
<p>You could write this more compactly with a generator expression:</p>
<div class="highlight python"><pre><span></span><span class="n">cards</span> <span class="o">=</span> <span class="p">((</span><span class="n">rank</span><span class="p">,</span> <span class="n">suit</span><span class="p">)</span> <span class="k">for</span> <span class="n">rank</span> <span class="ow">in</span> <span class="n">ranks</span> <span class="k">for</span> <span class="n">suit</span> <span class="ow">in</span> <span class="n">suits</span><span class="p">)</span>
</pre></div>
<p>However, some might argue that this is actually more difficult to understand than the more explicit nested <code>for</code> loop.</p>
<p>It helps to view nested <code>for</code> loops from a mathematical standpoint—that is, as a <a href="https://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a> of two or more iterables. In mathematics, the Cartesian product of two sets <em>A</em> and <em>B</em> is the set of all tuples of the form <em>(a, b)</em> where <em>a</em> is an element of <em>A</em> and <em>b</em> is an element of <em>B</em>.</p>
<p>Here’s an example with Python iterables: the Cartesian product of <code>A = [1, 2]</code> and <code>B = ['a', 'b']</code> is <code>[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]</code>.</p>
<p>The <code>itertools.product()</code> function is for exactly this 
situation. It takes any number of iterables as arguments and returns an 
iterator over tuples in the Cartesian product:</p>
<div class="highlight python"><pre><span></span><span class="n">it</span><span class="o">.</span><span class="n">product</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">])</span>  <span class="c1"># (1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')</span>
</pre></div>
<p>The <code>product()</code> function is by no means limited to two 
iterables. You can pass it as many as you like—they don’t even have to 
all be of the same size! See if you can predict what <code>product([1, 2, 3], ['a', 'b'], ['c'])</code> is, then check your work by running it in the interpreter.</p>
<blockquote>
<p><strong>Warning:</strong> The <code>product()</code> function is another “brute force” function and can lead to a combinatorial explosion if you aren’t careful.</p>
</blockquote>
<p>Using <code>product()</code>, you can re-write the <code>cards</code> in a single line:</p>
<div class="highlight python"><pre><span></span><span class="n">cards</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">ranks</span><span class="p">,</span> <span class="n">suits</span><span class="p">)</span>
</pre></div>
<p>This is all fine and dandy, but any Poker app worth its salt better start with a shuffled deck:</p>
<div class="highlight python"><pre><span></span><span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">shuffle</span><span class="p">(</span><span class="n">deck</span><span class="p">):</span>
    <span class="sd">"""Return iterator over shuffled deck."""</span>
    <span class="n">deck</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">deck</span><span class="p">)</span>
    <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">deck</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">deck</span><span class="p">))</span>

<span class="n">cards</span> <span class="o">=</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">cards</span><span class="p">)</span>
</pre></div>
<blockquote>
<p><strong>Note:</strong> The <code>random.shuffle()</code> function uses the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a> to shuffle a list (or any mutable sequence) in place <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm">in <em>O(n)</em> time</a>. This algorithm is well-suited for shuffling <code>cards</code> because it produces an unbiased permutation—that is, all permutations of the iterable are equally likely to be returned by <code>random.shuffle()</code>.</p>
<p>That said, you probably noticed that <code>shuffle()</code> creates a copy of its input <code>deck</code> in memory by calling <code>list(deck)</code>.
 While this seemingly goes against the spirit of this article, this 
author is unaware of a good way to shuffle an iterator without making a 
copy.</p>
</blockquote>
<p>As a courtesy to your users, you would like to give them the 
opportunity to cut the deck. If you imagine the cards being stacked 
neatly on a table, you have the user pick a number <em>n</em> and then remove the first <em>n</em> cards from the top of the stack and move them to the bottom.</p>
<p>If you know a thing or two about <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">slicing</a>, you might accomplish this like so:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">cut</span><span class="p">(</span><span class="n">deck</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="sd">"""Return an iterator over a deck of cards cut at index `n`."""</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">'`n` must be a non-negative integer'</span><span class="p">)</span>

    <span class="n">deck</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">deck</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="n">deck</span><span class="p">[</span><span class="n">n</span><span class="p">:]</span> <span class="o">+</span> <span class="n">deck</span><span class="p">[:</span><span class="n">n</span><span class="p">])</span>

<span class="n">cards</span> <span class="o">=</span> <span class="n">cut</span><span class="p">(</span><span class="n">cards</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>  <span class="c1"># Cut the deck in half.</span>
</pre></div>
<p>The <code>cut()</code> function first converts <code>deck</code> to a list so that you can slice it to make the cut. To guarantee your slices behave as expected, you’ve got to check that <code>n</code> is non-negative. If it isn’t, you better throw an exception so that nothing crazy happens.</p>
<p>Cutting the deck is pretty straightforward: the top of the cut deck is just <code>deck[:n]</code>, and the bottom is the remaining cards, or <code>deck[n:]</code>. To construct the new deck with the top “half” moved to the bottom, you just append it to the bottom: <code>deck[n:] + deck[:n]</code>.</p>
<p>The <code>cut()</code> function is pretty simple, but it suffers from
 a couple of problems. When you slice a list, you make a copy of the 
original list and return a new list with the selected elements. With a 
deck of only 52 cards, this increase in space complexity is trivial, but
 you could reduce the memory overhead using <code>itertools</code>. To do this, you’ll need three functions: <code>itertools.tee()</code>, <code>itertools.islice()</code>, and <code>itertools.chain()</code>.</p>
<p>Let’s take a look at how those functions work.</p>
<p>The <code>tee()</code> function can be used to create any number of 
independent iterators from a single iterable. It takes two arguments: 
the first is an iterable <code>inputs</code>, and the second is the number <code>n</code> of independent iterators over <code>inputs</code> to return (by default, <code>n</code> is set to 2). The iterators are returned in a tuple of length <code>n</code>.</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator1</span><span class="p">,</span> <span class="n">iterator2</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">tee</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iterator1</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iterator1</span><span class="p">)</span>  <span class="c1"># iterator1 is now exhausted.</span>
<span class="go">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iterator2</span><span class="p">)</span>  <span class="c1"># iterator2 works independently of iterator1</span>
<span class="go">[1, 2, 3, 4, 5].</span>
</pre></div>
<p>While <code>tee()</code> is useful for creating independent 
iterators, it is important to understand a little bit about how it works
 under the hood. When you call <code>tee()</code> to create <em>n</em> independent iterators, each iterator is essentially working with its own FIFO queue.</p>
<p>When a value is extracted from one iterator, that value is appended 
to the queues for the other iterators. Thus, if one iterator is 
exhausted before the others, each remaining iterator will hold a copy of
 the entire iterable in memory. (You can find a Python function that 
emulates <code>tee()</code> in the <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools.tee">docs</a>.)</p>
<p>For this reason, <code>tee()</code> should be used with care. If you are exhausting large portions of an iterator before working with the other returned by <code>tee()</code>, you may be better off casting the input iterator to a <code>list</code> or <code>tuple</code>.</p>
<p>The <code>islice()</code> function works much the same way as slicing
 a list or tuple. You pass it an iterable, a starting, and stopping 
point, and, just like slicing a list, the slice returned stops at the 
index just before the stopping point. You can optionally include a step 
value, as well. The biggest difference here is, of course, that <code>islice()</code> returns an iterator.</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Slice from index 2 to 4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="s1">'ABCDEFG'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)))</span>
<span class="go">['C' 'D' 'E']</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Slice from beginning to index 4, in steps of 2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[1, 3, 5]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Slice from index 3 to the end</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">None</span><span class="p">))</span>
<span class="go">[3, 4, 5, 6, 7, 8, 9]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Slice from beginning to index 3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="s1">'ABCDE'</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="go">['A', 'B', 'C', 'D']</span>
</pre></div>
<p>The last two examples above are useful for truncating iterables. You can use this to replace the list slicing used in <code>cut()</code> to select the “top” and “bottom” of the deck. As an added bonus, <code>islice()</code> won’t accept negative indices for the start/stop positions and the step value, so you won’t need to raise an exception if <code>n</code> is negative.</p>
<p>The last function you need is <code>chain()</code>. This function takes any number of iterables as arguments and “chains” them together. For example:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="s1">'ABC'</span><span class="p">,</span> <span class="s1">'DEF'</span><span class="p">))</span>
<span class="go">['A' 'B' 'C' 'D' 'E' 'F']</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">chain</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]))</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</pre></div>
<p>Now that you’ve got some additional firepower in your arsenal, you can re-write the <code>cut()</code> function to cut the deck of cards without making a full copy <code>cards</code> in memory:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">cut</span><span class="p">(</span><span class="n">deck</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="sd">"""Return an iterator over a deck of cards cut at index `n`."""</span>
    <span class="n">deck1</span><span class="p">,</span> <span class="n">deck2</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">tee</span><span class="p">(</span><span class="n">deck</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">top</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">deck1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">bottom</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">deck2</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">bottom</span><span class="p">,</span> <span class="n">top</span><span class="p">)</span>

<span class="n">cards</span> <span class="o">=</span> <span class="n">cut</span><span class="p">(</span><span class="n">cards</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
</pre></div>
<p>Now that you have shuffled and cut the cards, it is time to deal some hands. You could write a function <code>deal()</code>
 that takes a deck, the number of hands, and the hand size as arguments 
and returns a tuple containing the specified number of hands.</p>
<p>You do not need any new <code>itertools</code> functions to write this function. See what you can come up with on your own before reading ahead.</p>
<p>Here’s one solution:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">deal</span><span class="p">(</span><span class="n">deck</span><span class="p">,</span> <span class="n">num_hands</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">hand_size</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">deck</span><span class="p">)]</span> <span class="o">*</span> <span class="n">hand_size</span>
    <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">itr</span><span class="p">,</span> <span class="n">num_hands</span><span class="p">))</span> <span class="k">for</span> <span class="n">itr</span> <span class="ow">in</span> <span class="n">iters</span><span class="p">)))</span>
</pre></div>
<p>You start by creating a list of <code>hand_size</code> references to an iterator over <code>deck</code>. You then iterate over this list, removing <code>num_hands</code> cards at each step and storing them in tuples.</p>
<p>Next, you <code>zip()</code> these tuples up to emulate dealing one card at a time to each player. This produces <code>num_hands</code> tuples, each containing <code>hand_size</code> cards. Finally, you package the hands up into a tuple to return them all at once.</p>
<p>This implementation sets the default values for <code>num_hands</code> to <code>1</code> and <code>hand_size</code> to <code>5</code>—maybe you are making a “Five Card Draw” app. Here’s how you would use this function, with some sample output:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">p1_hand</span><span class="p">,</span> <span class="n">p2_hand</span><span class="p">,</span> <span class="n">p3_hand</span> <span class="o">=</span> <span class="n">deal</span><span class="p">(</span><span class="n">cards</span><span class="p">,</span> <span class="n">num_hands</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p1_hand</span>
<span class="go">(('A', 'S'), ('5', 'S'), ('7', 'H'), ('9', 'H'), ('5', 'H'))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p2_hand</span>
<span class="go">(('10', 'H'), ('2', 'D'), ('2', 'S'), ('J', 'C'), ('9', 'C'))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p3_hand</span>
<span class="go">(('2', 'C'), ('Q', 'S'), ('6', 'C'), ('Q', 'H'), ('A', 'C'))</span>
</pre></div>
<p>What do you think the state of <code>cards</code> is now that you have dealt three hands of five cards?</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">cards</span><span class="p">))</span>
<span class="go">37</span>
</pre></div>
<p>The fifteen cards dealt are consumed from the <code>cards</code> iterator, which is exactly what you want. That way, as the game continues, the state of the <code>cards</code> iterator reflects the state of the deck in play.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5258" data-processed="true"></div><div id="waldo-tag-5257" data-processed="true" data-google-query-id="CPDLnN7Eh-cCFcsTaAodb7ANfw"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="section-recap_2">Section Recap</h3>
<p>Let’s review the <code>itertools</code> functions you saw in this section.</p>
<h4 id="itertoolsproduct-example"><code>itertools.product</code> Example</h4>
<blockquote>
<p><code>product(*iterables, repeat=1)</code></p>
<p>Cartesian product of input iterables. Equivalent to nested for-loops.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">product</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">])</span>
<span class="go">(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')</span>
</pre></div>
<h4 id="itertoolstee-example"><code>itertools.tee</code> Example</h4>
<blockquote>
<p><code>tee(iterable, n=2)</code></p>
<p>Create any number of independent iterators from a single input iterable.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">iter1</span><span class="p">,</span> <span class="n">iter2</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">tee</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iter1</span><span class="p">)</span>
<span class="go">['a', 'b', 'c']</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iter2</span><span class="p">)</span>
<span class="go">['a', 'b', 'c']</span>
</pre></div>
<h4 id="itertoolsislice-example"><code>itertools.islice</code> Example</h4>
<blockquote>
<p><code>islice(iterable, stop)</code>
<code>islice(iterable, start, stop, step=1)</code></p>
<p>Return an iterator whose <code>__next__()</code> method returns selected values from an iterable. Works like a <code>slice()</code> on a list but returns an iterator.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">islice</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">3</span><span class="p">)</span>
<span class="go">1, 2, 3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">islice</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">2, 3</span>
</pre></div>
<h4 id="itertoolschain-example"><code>itertools.chain</code> Example</h4>
<blockquote>
<p><code>chain(*iterables)</code></p>
<p>Return a chain object whose <code>__next__()</code> method returns 
elements from the first iterable until it is exhausted, then elements 
from the next iterable, until all of the iterables are exhausted.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">chain</span><span class="p">(</span><span class="s1">'abc'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="go">'a', 'b', 'c', 1, 2, 3</span>
</pre></div>
<h2 id="intermission-flattening-a-list-of-lists">Intermission: Flattening A List of Lists</h2>
<p>In the previous example, you used <code>chain()</code> to tack one iterator onto the end of another. The <code>chain()</code> function has a class method <code>.from_iterable()</code>
 that takes a single iterable as an argument. The elements of the 
iterable must themselves be iterable, so the net effect is that <code>chain.from_iterable()</code> flattens its argument:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]))</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>
</pre></div>
<p>There’s no reason the argument of <code>chain.from_iterable()</code> needs to be finite. You could emulate the behavior of <code>cycle()</code>, for example:</p>
<div class="highlight python"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">cycle</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="s1">'abc'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">cycle</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">]</span>
</pre></div>
<p>The <code>chain.from_iterable()</code> function is useful when you need to build an iterator over data that has been “chunked.”</p>
<p>In the next section, you will see how to use <code>itertools</code> 
to do some data analysis on a large dataset. But you deserve a break for
 having stuck with it this far. Why not hydrate yourself and relax a 
bit? Maybe even play a little <a href="https://archive.org/details/Trek-nTheNthIteration">Star Trek: The Nth Iteration</a>.</p>
<p>Back? Great! Let’s do some data analysis.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5260" data-processed="true"></div><div id="waldo-tag-5259" data-processed="true" data-google-query-id="COf_i-vEh-cCFUiDcAod5n4MOQ"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h2 id="analyzing-the-sp500">Analyzing the S&amp;P500</h2>
<p>In this example, you will get your first taste of using <code>itertools</code> to manipulate a large dataset—in particular, the historical daily price data of the S&amp;P500 index. A CSV file <code>SP500.csv</code> with this data can be found <a href="https://github.com/realpython/materials/tree/master/itertools-in-python3">here</a> (source: <a href="https://finance.yahoo.com/quote/%5EGSPC?p=^GSPC">Yahoo Finance</a>). The problem you’ll tackle is this:</p>
<blockquote>
<p>Determine the maximum daily gain, daily loss (in percent change), and
 the longest growth streak in the history of the S&amp;P500.</p>
</blockquote>
<p>To get a feel for what you’re dealing with, here are the first ten rows of <code>SP500.csv</code>:</p>
<div class="highlight sh"><pre><span></span><span class="gp">$</span> head -n <span class="m">10</span> SP500.csv
<span class="go">Date,Open,High,Low,Close,Adj Close,Volume</span>
<span class="go">1950-01-03,16.660000,16.660000,16.660000,16.660000,16.660000,1260000</span>
<span class="go">1950-01-04,16.850000,16.850000,16.850000,16.850000,16.850000,1890000</span>
<span class="go">1950-01-05,16.930000,16.930000,16.930000,16.930000,16.930000,2550000</span>
<span class="go">1950-01-06,16.980000,16.980000,16.980000,16.980000,16.980000,2010000</span>
<span class="go">1950-01-09,17.080000,17.080000,17.080000,17.080000,17.080000,2520000</span>
<span class="go">1950-01-10,17.030001,17.030001,17.030001,17.030001,17.030001,2160000</span>
<span class="go">1950-01-11,17.090000,17.090000,17.090000,17.090000,17.090000,2630000</span>
<span class="go">1950-01-12,16.760000,16.760000,16.760000,16.760000,16.760000,2970000</span>
<span class="go">1950-01-13,16.670000,16.670000,16.670000,16.670000,16.670000,3330000</span>
</pre></div>
<p>As you can see, the early data is limited. The data improves for later dates, and, as a whole, is sufficient for this example.</p>
<p>The strategy for solving this problem is as follows:</p>
<ul>
<li>Read data from the CSV file and transform it into a sequence <code>gains</code> of daily percent changes using the “Adj Close” column.</li>
<li>Find the maximum and minimum values of the <code>gains</code> 
sequence, and the date on which they occur. (Note that it is possible 
that these values are attained on more than on date; in that case, the 
most recent date will suffice.)</li>
<li>Transform <code>gains</code> into a sequence <code>growth_streaks</code> of tuples of consecutive positive values in <code>gains</code>. Then determine the length of the longest tuple in <code>growth_streaks</code>
 and the beginning and ending dates of the streak. (It is possible that 
the maximum length is attained by more than one tuple in <code>growth_streaks</code>; in that case, the tuple with the most recent beginning and ending dates will suffice.)</li>
</ul>
<p>The <em>percent change</em> between two values <em>x</em> and <em>y</em> is given by the following formula:</p>
<p><a href="https://files.realpython.com/media/percent_change.3c81a67b1906.png" target="_blank"><img class="img-fluid mx-auto d-block w-50" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/percent_change.png" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/percent_change.3c81a67b1906.png&amp;w=274&amp;sig=9b357094576c02a2f6b9521007b8364a4eeedae6 274w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/percent_change.3c81a67b1906.png&amp;w=548&amp;sig=4f51daec3a07a039cb51cd879fc032545a6ad1a9 548w, https://files.realpython.com/media/percent_change.3c81a67b1906.png 1097w" sizes="75vw" alt="Percent Change Formula" width="1097" height="200"></a></p>
<p>For each step in the analysis, it is necessary to compare values 
associated with dates. To facilitate these comparisons, you can subclass
 the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><code>namedtuple</code> object</a> from the <a href="https://docs.python.org/3/library/collections.html"><code>collections</code> module</a>:</p>
<div class="highlight python"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">namedtuple</span>


<span class="k">class</span> <span class="nc">DataPoint</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s1">'DataPoint'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'date'</span><span class="p">,</span> <span class="s1">'value'</span><span class="p">])):</span>
    <span class="vm">__slots__</span> <span class="o">=</span> <span class="p">()</span>

    <span class="k">def</span> <span class="nf">__le__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;=</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__gt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>
</pre></div>
<p>The <code>DataPoint</code> class has two attributes: <code>date</code> (a <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime"><code>datetime.datetime</code></a> instance) and <code>value</code>. The <a href="https://docs.python.org/3/reference/datamodel.html#object.__le__"><code>.__le__()</code></a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__"><code>.__lt__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__gt__"><code>.__gt__()</code></a> <a href="https://realpython.com/operator-function-overloading/">dunder methods</a> are implemented so that the <code>&lt;=</code>, <code>&lt;</code>, and <code>&gt;</code> boolean comparators can be used to compare the values of two <code>DataPoint</code> objects. This also allows the <a href="https://docs.python.org/3/library/functions.html#max"><code>max()</code></a> and <a href="https://docs.python.org/3/library/functions.html#min"><code>min()</code></a> built-in functions to be called with <code>DataPoint</code> arguments.</p>
<blockquote>
<p><strong>Note:</strong> If you are not familiar with <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><code>namedtuple</code></a>, check out <a href="https://dbader.org/blog/writing-clean-python-with-namedtuples">this excellent resource</a>. The <code>namedtuple</code> implementation for <code>DataPoint</code> is just one of many ways to build this data structure. For example, in Python 3.7 you could implement <code>DataPoint</code> as a data class. Check out our <a href="https://realpython.com/python-data-classes/">Ultimate Guide to Data Classes</a> for more information.</p>
</blockquote>
<p>The following reads the data from <code>SP500.csv</code> to a tuple of <code>DataPoint</code> objects:</p>
<div class="highlight python"><pre><span></span><span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="k">import</span> <span class="n">datetime</span>


<span class="k">def</span> <span class="nf">read_prices</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">_strptime</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">DataPoint</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">_strptime</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Date'</span><span class="p">],</span> <span class="s1">'%Y-%m-</span><span class="si">%d</span><span class="s1">'</span><span class="p">)</span><span class="o">.</span><span class="n">date</span><span class="p">(),</span>
                            <span class="n">value</span><span class="o">=</span><span class="nb">float</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Adj Close'</span><span class="p">]))</span>


<span class="n">prices</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">read_prices</span><span class="p">(</span><span class="s1">'SP500.csv'</span><span class="p">))</span>
</pre></div>
<p>The <code>read_prices()</code> generator opens <code>SP500.csv</code> and reads each row with a <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter"><code>csv.DictReader()</code></a> object. <code>DictReader()</code> returns each row as an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"><code>OrderedDict</code></a> whose keys are the column names from the header row of the CSV file.</p>
<p>For each row, <code>read_prices()</code> yields a <code>DataPoint</code>
 object containing the values in the “Date” and “Adj Close” columns. 
Finally, the full sequence of data points is committed to memory as a <code>tuple</code> and stored in the <code>prices</code> variable.</p>
<p>Next, <code>prices</code> needs to be transformed to a sequence of daily percent changes:</p>
<div class="highlight python"><pre><span></span><span class="n">gains</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">DataPoint</span><span class="p">(</span><span class="n">day</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="p">(</span><span class="n">day</span><span class="o">.</span><span class="n">value</span><span class="o">/</span><span class="n">prev_day</span><span class="o">.</span><span class="n">value</span> <span class="o">-</span> <span class="mf">1.</span><span class="p">))</span>
                <span class="k">for</span> <span class="n">day</span><span class="p">,</span> <span class="n">prev_day</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">prices</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">prices</span><span class="p">))</span>
</pre></div>
<p>The choice of storing the data in a <code>tuple</code> is intentional. Although you could point <code>gains</code> to an iterator, you will need to iterate over the data twice to find the minimum and maximum values.</p>
<p>If you use <code>tee()</code> to create two independent iterators, 
exhausting one iterator to find the maximum will create a copy of all of
 the data in memory for the second iterator. By creating a <code>tuple</code> up front, you do not lose anything in terms of space complexity compared to <code>tee()</code>, and you may even gain a little speed.</p>
<blockquote>
<p><strong>Note:</strong> This example focuses on leveraging <code>itertools</code>
 for analyzing the S&amp;P500 data. Those intent on working with a lot 
of time series financial data might also want to check out the <a href="https://pandas.pydata.org/">Pandas</a> library, which is well suited for such tasks.</p>
</blockquote>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5262" data-processed="true"></div><div id="waldo-tag-5261" data-processed="true" data-google-query-id="CLXbse3Eh-cCFblLfQod5aoOig"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="maximum-gain-and-loss">Maximum Gain and Loss</h3>
<p>To determine the maximum gain on any single day, you might do something like this:</p>
<div class="highlight python"><pre><span></span><span class="n">max_gain</span> <span class="o">=</span> <span class="n">DataPoint</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">for</span> <span class="n">data_point</span> <span class="ow">in</span> <span class="n">gains</span><span class="p">:</span>
    <span class="n">max_gain</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">data_point</span><span class="p">,</span> <span class="n">max_gain</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">max_gain</span><span class="p">)</span>   <span class="c1"># DataPoint(date='2008-10-28', value=11.58)</span>
</pre></div>
<p>You can simplify the <code>for</code> loop using the <a href="https://docs.python.org/3/library/functools.html#functools.reduce"><code>functools.reduce()</code> function</a>. This function accepts a binary function <code>func</code> and an iterable <code>inputs</code> as arguments, and “reduces” <code>inputs</code> to a single value by applying <code>func</code> cumulatively to pairs of objects in the iterable.</p>
<p>For example, <code>functools.reduce(operator.add, [1, 2, 3, 4, 5])</code> will return the sum <code>1 + 2 + 3 + 4 + 5 = 15</code>. You can think of <code>reduce()</code> as working in much the same way as <code>accumulate()</code>, except that it returns only the final value in the new sequence.</p>
<p>Using <code>reduce()</code>, you can get rid of the <code>for</code> loop altogether in the above example:</p>
<div class="highlight python"><pre><span></span><span class="kn">import</span> <span class="nn">functools</span> <span class="k">as</span> <span class="nn">ft</span>


<span class="n">max_gain</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">max</span><span class="p">,</span> <span class="n">gains</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">max_gain</span><span class="p">)</span>  <span class="c1"># DataPoint(date='2008-10-28', value=11.58)</span>
</pre></div>
<p>The above solution works, but it isn’t equivalent to the <code>for</code>
 loop you had before. Do you see why? Suppose the data in your CSV file 
recorded a loss every single day. What would the value of <code>max_gain</code> be?</p>
<p>In the <code>for</code> loop, you first set <code>max_gain = DataPoint(None, 0)</code>, so if there are no gains, the final <code>max_gain</code> value will be this empty <code>DataPoint</code> object. However, the <code>reduce()</code> solution returns the smallest loss. That is not what you want and could introduce a difficult to find bug.</p>
<p>This is where <code>itertools</code> can help you out. The <code>itertools.filterfalse()</code> function takes two arguments: a function that returns <code>True</code> or <code>False</code> (called a <strong>predicate</strong>), and an iterable <code>inputs</code>. It returns an iterator over the elements in <code>inputs</code> for which the predicate returns <code>False</code>.</p>
<p>Here’s a simple example:</p>
<div class="highlight python"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">only_positives</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">only_positives</span><span class="p">)</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</pre></div>
<p>You can use <code>filterfalse()</code> to filter out the values in <code>gains</code> that are negative or zero so that <code>reduce()</code> only works on positive values:</p>
<div class="highlight python"><pre><span></span><span class="n">max_gain</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">max</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">gains</span><span class="p">))</span>
</pre></div>
<p>What happens if there are never any gains? Consider the following:</p>
<div class="highlight python"><pre><span></span><span class="err">&gt;&gt;&gt; ft.reduce(max, it.filterfalse(lambda x: x &lt;= 0, [-1, -2, -3]))</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">TypeError</span>: <span class="n">reduce() of empty sequence with no initial value</span>
</pre></div>
<p>Well, that’s not what you want! But, it makes sense because the iterator returned by <code>filterflase()</code> is empty. You could handle the <code>TypeError</code> by wrapping the call to <code>reduce()</code> with <code>try...except</code>, but there’s a better way.</p>
<p>The <code>reduce()</code> function accepts an optional third argument for an initial value. Passing <code>0</code> to this third argument gets you the expected behavior:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">max</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">]),</span> <span class="mi">0</span><span class="p">)</span>
<span class="go">0</span>
</pre></div>
<p>Applying this to the S&amp;P500 example:</p>
<div class="highlight python"><pre><span></span><span class="n">zdp</span> <span class="o">=</span> <span class="n">DataPoint</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># zero DataPoint</span>
<span class="n">max_gain</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">max</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">diffs</span><span class="p">),</span> <span class="n">zdp</span><span class="p">)</span>
</pre></div>
<p>Great! You’ve got it working just the way it should! Now, finding the maximum loss is easy:</p>
<div class="highlight python"><pre><span></span><span class="n">max_loss</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">gains</span><span class="p">),</span> <span class="n">zdp</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">max_loss</span><span class="p">)</span>  <span class="c1"># DataPoint(date='2018-02-08', value=-20.47)</span>
</pre></div>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5264" data-processed="true"></div><div id="waldo-tag-5263" data-processed="true" data-google-query-id="CLiRxN3Eh-cCFQrzjwodTGgJTg"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h3 id="longest-growth-streak">Longest Growth Streak</h3>
<p>Finding the longest growth streak in the history of the S&amp;P500 is
 equivalent to finding the largest number of consecutive positive data 
points in the <code>gains</code> sequence. The <code>itertools.takewhile()</code> and <code>itertools.dropwhile()</code> functions are perfect for this situation.</p>
<p>The <code>takewhile()</code> function takes a predicate and an iterable <code>inputs</code> as arguments and returns an iterator over <code>inputs</code> that stops at the first instance of an element for which the predicate returns <code>False</code>:</p>
<div class="highlight python"><pre><span></span><span class="n">it</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>  <span class="c1"># 0, 1, 2</span>
</pre></div>
<p>The <code>dropwhile()</code> function does exactly the opposite. It returns an iterator beginning at the first element for which the predicate returns <code>False</code>:</p>
<div class="highlight python"><pre><span></span><span class="n">it</span><span class="o">.</span><span class="n">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>  <span class="c1"># 3, 4</span>
</pre></div>
<p>In the following generator function, <code>takewhile()</code> and <code>dropwhile()</code> are composed to yield tuples of consecutive positive elements of a sequence:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">consecutive_positives</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">zero</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_consecutives</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">itr</span> <span class="ow">in</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">sequence</span><span class="p">)):</span>
            <span class="k">yield</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="p">,</span>
                                     <span class="n">it</span><span class="o">.</span><span class="n">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="n">zero</span><span class="p">,</span> <span class="n">itr</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">_consecutives</span><span class="p">())</span>
</pre></div>
<p>The <code>consecutive_positives()</code> function works because <code>repeat()</code> keeps returning a pointer to an iterator over the <code>sequence</code> argument, which is being partially consumed at each iteration by the call to <code>tuple()</code> in the <code>yield</code> statement.</p>
<p>You can use <code>consecutive_positives()</code> to get a generator that produces tuples of consecutive positive data points in <code>gains</code>:</p>
<div class="highlight python"><pre><span></span><span class="n">growth_streaks</span> <span class="o">=</span> <span class="n">consecutive_positives</span><span class="p">(</span><span class="n">gains</span><span class="p">,</span> <span class="n">zero</span><span class="o">=</span><span class="n">DataPoint</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</pre></div>
<p>Now you can use <code>reduce()</code> to extract the longest growth streak:</p>
<div class="highlight python"><pre><span></span><span class="n">longest_streak</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">else</span> <span class="n">y</span><span class="p">,</span>
                           <span class="n">growth_streaks</span><span class="p">)</span>
</pre></div>
<p>Putting the whole thing together, here’s a full script that will read data from the <code>SP500.csv</code> file and print out the max gain/loss and longest growth streak:</p>
<div class="highlight python"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">namedtuple</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="k">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="nn">itertools</span> <span class="k">as</span> <span class="nn">it</span>
<span class="kn">import</span> <span class="nn">functools</span> <span class="k">as</span> <span class="nn">ft</span>


<span class="k">class</span> <span class="nc">DataPoint</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s1">'DataPoint'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'date'</span><span class="p">,</span> <span class="s1">'value'</span><span class="p">])):</span>
    <span class="vm">__slots__</span> <span class="o">=</span> <span class="p">()</span>

    <span class="k">def</span> <span class="nf">__le__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;=</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__gt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span>


<span class="k">def</span> <span class="nf">consecutive_positives</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">zero</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_consecutives</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">itr</span> <span class="ow">in</span> <span class="n">it</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">sequence</span><span class="p">)):</span>
            <span class="k">yield</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">it</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="p">,</span>
                                     <span class="n">it</span><span class="o">.</span><span class="n">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="n">zero</span><span class="p">,</span> <span class="n">itr</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">_consecutives</span><span class="p">())</span>


<span class="k">def</span> <span class="nf">read_prices</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">_strptime</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">DataPoint</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">_strptime</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Date'</span><span class="p">],</span> <span class="s1">'%Y-%m-</span><span class="si">%d</span><span class="s1">'</span><span class="p">)</span><span class="o">.</span><span class="n">date</span><span class="p">(),</span>
                            <span class="n">value</span><span class="o">=</span><span class="nb">float</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Adj Close'</span><span class="p">]))</span>


<span class="c1"># Read prices and calculate daily percent change.</span>
<span class="n">prices</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">read_prices</span><span class="p">(</span><span class="s1">'SP500.csv'</span><span class="p">))</span>
<span class="n">gains</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">DataPoint</span><span class="p">(</span><span class="n">day</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="p">(</span><span class="n">day</span><span class="o">.</span><span class="n">value</span><span class="o">/</span><span class="n">prev_day</span><span class="o">.</span><span class="n">value</span> <span class="o">-</span> <span class="mf">1.</span><span class="p">))</span>
              <span class="k">for</span> <span class="n">day</span><span class="p">,</span> <span class="n">prev_day</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">prices</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">prices</span><span class="p">))</span>

<span class="c1"># Find maximum daily gain/loss.</span>
<span class="n">zdp</span> <span class="o">=</span> <span class="n">DataPoint</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># zero DataPoint</span>
<span class="n">max_gain</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">max</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="n">zdp</span><span class="p">,</span> <span class="n">gains</span><span class="p">))</span>
<span class="n">max_loss</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">it</span><span class="o">.</span><span class="n">filterfalse</span><span class="p">(</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="n">zdp</span><span class="p">,</span> <span class="n">gains</span><span class="p">),</span> <span class="n">zdp</span><span class="p">)</span>


<span class="c1"># Find longest growth streak.</span>
<span class="n">growth_streaks</span> <span class="o">=</span> <span class="n">consecutive_positives</span><span class="p">(</span><span class="n">gains</span><span class="p">,</span> <span class="n">zero</span><span class="o">=</span><span class="n">DataPoint</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="n">longest_streak</span> <span class="o">=</span> <span class="n">ft</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">else</span> <span class="n">y</span><span class="p">,</span>
                           <span class="n">growth_streaks</span><span class="p">)</span>

<span class="c1"># Display results.</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">'Max gain: </span><span class="si">{1:.2f}% o</span><span class="s1">n </span><span class="si">{0}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">max_gain</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">'Max loss: </span><span class="si">{1:.2f}% o</span><span class="s1">n </span><span class="si">{0}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">max_loss</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">'Longest growth streak: </span><span class="si">{num_days}</span><span class="s1"> days (</span><span class="si">{first}</span><span class="s1"> to </span><span class="si">{last}</span><span class="s1">)'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
    <span class="n">num_days</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">longest_streak</span><span class="p">),</span>
    <span class="n">first</span><span class="o">=</span><span class="n">longest_streak</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">date</span><span class="p">,</span>
    <span class="n">last</span><span class="o">=</span><span class="n">longest_streak</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">date</span>
<span class="p">))</span>
</pre></div>
<p>Running the above script produces the following output:</p>
<div class="highlight sh"><pre><span></span><span class="go">Max gain: 11.58% on 2008-10-13</span>
<span class="go">Max loss: -20.47% on 1987-10-19</span>
<span class="go">Longest growth streak: 14 days (1971-03-26 to 1971-04-15)</span>
</pre></div>
<h3 id="section-recap_3">Section Recap</h3>
<p>In this section, you covered a lot of ground, but you only saw a few functions from <code>itertools</code>. Let’s review those now.</p>
<h4 id="itertoolsfilterfalse-example"><code>itertools.filterfalse</code> Example</h4>
<blockquote>
<p><code>filterfalse(pred, iterable)</code></p>
<p>Return those items of sequence for which <code>pred(item)</code> is false. If <code>pred</code> is <code>None</code>, return the items that are false.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">filterfalse</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
<span class="go">0, 0, 0</span>
</pre></div>
<h4 id="itertoolstakewhile-example"><code>itertools.takewhile</code> Example</h4>
<blockquote>
<p><code>takewhile(pred, iterable)</code></p>
<p>Return successive entries from an iterable as long as <code>pred</code> evaluates to true for each entry.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">takewhile</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
<span class="go">1, 1, 1</span>
</pre></div>
<h4 id="itertoolsdropwhile-example"><code>itertools.dropwhile</code> Example</h4>
<blockquote>
<p><code>dropwhile(pred, iterable)</code></p>
<p>Drop items from the iterable while <code>pred(item)</code> is true. Afterwards, return every element until the iterable is exhausted.</p>
</blockquote>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">dropwhile</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
<span class="go">0, 0, 1, 1, 0</span>
</pre></div>
<p>You are really starting to master this whole <code>itertools</code> thing! The community swim team would like to commission you for a small project.</p>
<div class="w-100 text-center js-needs-scaling" style="transform-origin: 0 0;"><div id="waldo-tag-5266" data-processed="true"></div><div id="waldo-tag-5265" data-processed="true" data-google-query-id="CIXCleLEh-cCFVWKjwodzVsFRw"></div> <a class="small text-muted js-disclosure" href="https://realpython.com/account/join/" rel="nofollow" style="display: none;"> <i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><h2 id="building-relay-teams-from-swimmer-data">Building Relay Teams From Swimmer Data</h2>
<p>In this example, you will read data from a CSV file containing 
swimming event times for a community swim team from all of the swim 
meets over the course of a season. The goal is to determine which 
swimmers should be in the relay teams for each stroke next season.</p>
<p>Each stroke should have an “A” and a “B” relay team with four 
swimmers each. The “A” team should contain the four swimmers with the 
best times for the stroke and the “B” team the swimmers with the next 
four best times.</p>
<p>The data for this example can be found <a href="https://github.com/realpython/materials/tree/master/itertools-in-python3">here</a>. If you want to follow along, download it to your current working directory and save it as <code>swimmers.csv</code>.</p>
<p>Here are the first 10 rows of <code>swimmers.csv</code>:</p>
<div class="highlight sh"><pre><span></span><span class="gp">$</span> head -n <span class="m">10</span> swimmers.csv
<span class="go">Event,Name,Stroke,Time1,Time2,Time3</span>
<span class="go">0,Emma,freestyle,00:50:313667,00:50:875398,00:50:646837</span>
<span class="go">0,Emma,backstroke,00:56:720191,00:56:431243,00:56:941068</span>
<span class="go">0,Emma,butterfly,00:41:927947,00:42:062812,00:42:007531</span>
<span class="go">0,Emma,breaststroke,00:59:825463,00:59:397469,00:59:385919</span>
<span class="go">0,Olivia,freestyle,00:45:566228,00:46:066985,00:46:044389</span>
<span class="go">0,Olivia,backstroke,00:53:984872,00:54:575110,00:54:932723</span>
<span class="go">0,Olivia,butterfly,01:12:548582,01:12:722369,01:13:105429</span>
<span class="go">0,Olivia,breaststroke,00:49:230921,00:49:604561,00:49:120964</span>
<span class="go">0,Sophia,freestyle,00:55:209625,00:54:790225,00:55:351528</span>
</pre></div>
<p>The three times in each row represent the times recorded by three different stopwatches, and are given in <code>MM:SS:mmmmmm</code> format (minutes, seconds, microseconds). The accepted time for an event is the <em>median</em> of these three times, <em>not</em> the average.</p>
<p>Let’s start by creating a subclass <code>Event</code> of the <code>namedtuple</code> object, just like we did in the <a href="#analyzing-the-sp500">SP500 example</a>:</p>
<div class="highlight python"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">namedtuple</span>

<span class="k">class</span> <span class="nc">Event</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s1">'Event'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'stroke'</span><span class="p">,</span> <span class="s1">'name'</span><span class="p">,</span> <span class="s1">'time'</span><span class="p">])):</span>
    <span class="vm">__slots__</span> <span class="o">=</span> <span class="p">()</span>

    <span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">time</span>
</pre></div>
<p>The <code>.stroke</code> property stores the name of the stroke in the event, <code>.name</code> stores the swimmer name, and <code>.time</code> records the accepted time for the event. The <code>.__lt__()</code> dunder method will allow <code>min()</code> to be called on a sequence of <code>Event</code> objects.</p>
<p>To read the data from the CSV into a tuple of <code>Event</code> objects, you can use the <code>csv.DictReader</code> object:</p>
<div class="highlight python"><pre><span></span><span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">statistics</span>

<span class="k">def</span> <span class="nf">read_events</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">_strptime</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_median</span><span class="p">(</span><span class="n">times</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">statistics</span><span class="o">.</span><span class="n">median</span><span class="p">((</span><span class="n">_strptime</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="s1">'%M:%S:</span><span class="si">%f</span><span class="s1">'</span><span class="p">)</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
                                  <span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="n">row</span><span class="p">[</span><span class="s1">'Times'</span><span class="p">]))</span>

    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'Event'</span><span class="p">,</span> <span class="s1">'Name'</span><span class="p">,</span> <span class="s1">'Stroke'</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">,</span> <span class="n">restkey</span><span class="o">=</span><span class="s1">'Times'</span><span class="p">)</span>
        <span class="nb">next</span><span class="p">(</span><span class="n">reader</span><span class="p">)</span>  <span class="c1"># skip header</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">Event</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Stroke'</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">'Name'</span><span class="p">],</span> <span class="n">_median</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Times'</span><span class="p">]))</span>


<span class="n">events</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">read_events</span><span class="p">(</span><span class="s1">'swimmers.csv'</span><span class="p">))</span>
</pre></div>
<p>The <code>read_events()</code> generator reads each row in the <code>swimmers.csv</code> file into an <code>OrderedDict</code> object in the following line:</p>
<div class="highlight python"><pre><span></span><span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">,</span> <span class="n">restkey</span><span class="o">=</span><span class="s1">'Times'</span><span class="p">)</span>
</pre></div>
<p>By assigning the <code>'Times'</code> field to <code>restkey</code>, the “Time1”, “Time2”, and “Time3” columns of each row in the CSV file will be stored in a list on the <code>'Times'</code> key of the <code>OrderedDict</code> returned by <code>csv.DictReader</code>.</p>
<p>For example, the first row of the file (excluding the header row) is read into the following object:</p>
<div class="highlight python"><pre><span></span><span class="n">OrderedDict</span><span class="p">([(</span><span class="s1">'Event'</span><span class="p">,</span> <span class="s1">'0'</span><span class="p">),</span>
             <span class="p">(</span><span class="s1">'Name'</span><span class="p">,</span> <span class="s1">'Emma'</span><span class="p">),</span>
             <span class="p">(</span><span class="s1">'Stroke'</span><span class="p">,</span> <span class="s1">'freestyle'</span><span class="p">),</span>
             <span class="p">(</span><span class="s1">'Times'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'00:50:313667'</span><span class="p">,</span> <span class="s1">'00:50:875398'</span><span class="p">,</span> <span class="s1">'00:50:646837'</span><span class="p">])])</span>
</pre></div>
<p>Next, <code>read_events()</code> yields an <code>Event</code> object with the stroke, swimmer name, and median time (as a <a href="https://docs.python.org/3/library/datetime.html#time-objects"><code>datetime.time</code> object</a>) returned by the <code>_median()</code> function, which calls <a href="https://docs.python.org/3/library/statistics.html#statistics.median"><code>statistics.median()</code></a> on the list of times in the row.</p>
<p>Since each item in the list of times is read as a string by <code>csv.DictReader()</code>, <code>_median()</code> uses the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"><code>datetime.datetime.strptime()</code> classmethod</a> to instantiate a time object from each string.</p>
<p>Finally, a tuple of <code>Event</code> objects is created:</p>
<div class="highlight python"><pre><span></span><span class="n">events</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">read_events</span><span class="p">(</span><span class="s1">'swimmers.csv'</span><span class="p">))</span>
</pre></div>
<p>The first five elements of <code>events</code> look like this:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">events</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
<span class="go">(Event(stroke='freestyle', name='Emma', time=datetime.time(0, 0, 50, 646837)),</span>
<span class="go"> Event(stroke='backstroke', name='Emma', time=datetime.time(0, 0, 56, 720191)),</span>
<span class="go"> Event(stroke='butterfly', name='Emma', time=datetime.time(0, 0, 42, 7531)),</span>
<span class="go"> Event(stroke='breaststroke', name='Emma', time=datetime.time(0, 0, 59, 397469)),</span>
<span class="go"> Event(stroke='freestyle', name='Olivia', time=datetime.time(0, 0, 46, 44389)))</span>
</pre></div>
<p>Now that you’ve got the data into memory, what do you do with it? Here’s the plan of attack:</p>
<ul>
<li>Group the events by stroke.</li>
<li>For each stroke:<ul>
<li>Group its events by swimmer name and determine the best time for each swimmer.</li>
<li>Order the swimmers by best time.</li>
<li>The first four swimmers make the “A” team for the stroke, and the next four swimmers make the “B” team.</li>
</ul>
</li>
</ul>
<p>The <code>itertools.groupby()</code> function makes grouping objects in an iterable a snap. It takes an iterable <code>inputs</code> and a <code>key</code> to group by, and returns an object containing iterators over the elements of <code>inputs</code> grouped by the key.</p>
<p>Here’s a simple <code>groupby()</code> example:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">'name'</span><span class="p">:</span> <span class="s1">'Alan'</span><span class="p">,</span> <span class="s1">'age'</span><span class="p">:</span> <span class="mi">34</span><span class="p">},</span>
<span class="gp">... </span>        <span class="p">{</span><span class="s1">'name'</span><span class="p">:</span> <span class="s1">'Catherine'</span><span class="p">,</span> <span class="s1">'age'</span><span class="p">:</span> <span class="mi">34</span><span class="p">},</span>
<span class="gp">... </span>        <span class="p">{</span><span class="s1">'name'</span><span class="p">:</span> <span class="s1">'Betsy'</span><span class="p">,</span> <span class="s1">'age'</span><span class="p">:</span> <span class="mi">29</span><span class="p">},</span>
<span class="gp">... </span>        <span class="p">{</span><span class="s1">'name'</span><span class="p">:</span> <span class="s1">'David'</span><span class="p">,</span> <span class="s1">'age'</span><span class="p">:</span> <span class="mi">33</span><span class="p">}]</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">grouped_data</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="s1">'age'</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">grp</span> <span class="ow">in</span> <span class="n">grouped_data</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">'</span><span class="si">{}</span><span class="s1">: </span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">grp</span><span class="p">)))</span>
<span class="gp">...</span>
<span class="go">34: [{'name': 'Alan', 'age': 34}, {'name': 'Betsy', 'age': 34}]</span>
<span class="go">29: [{'name': 'Catherine', 'age': 29}]</span>
<span class="go">33: [{'name': 'David', 'age': 33}]</span>
</pre></div>
<p>If no key is specified, <code>groupby()</code> defaults to grouping by “identity”—that is, aggregating identical elements in the iterable:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">grp</span> <span class="ow">in</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">'</span><span class="si">{}</span><span class="s1">: </span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">grp</span><span class="p">)))</span>
<span class="gp">...</span>
<span class="go">1: [1, 1]</span>
<span class="go">2: [2, 2, 2]</span>
<span class="go">3: [3]</span>
</pre></div>
<p>The object returned by <code>groupby()</code> is sort of like a 
dictionary in the sense that the iterators returned are associated with a
 key. However, unlike a dictionary, it won’t allow you to access its 
values by key name:</p>
<div class="highlight python"><pre><span></span><span class="err">&gt;&gt;&gt; grouped_data[1]</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">TypeError</span>: <span class="n">'itertools.groupby' object is not subscriptable</span>
</pre></div>
<p>In fact, <strong><code>groupby()</code> returns an iterator over tuples whose first components are keys and second components are iterators over the grouped data</strong>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">grouped_data</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">grouped_data</span><span class="p">)</span>
<span class="go">[(1, &lt;itertools._grouper object at 0x7ff3056130b8&gt;),</span>
<span class="go"> (2, &lt;itertools._grouper object at 0x7ff3056130f0&gt;),</span>
<span class="go"> (3, &lt;itertools._grouper object at 0x7ff305613128&gt;)]</span>
</pre></div>
<p>One thing to keep in mind with <code>groupby()</code> is that it isn’t as smart as you might like. As <code>groupby()</code>
 traverses the data, it aggregates elements until an element with a 
different key is encountered, at which point it starts a new group:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">grouped_data</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">grp</span> <span class="ow">in</span> <span class="n">grouped_data</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">'</span><span class="si">{}</span><span class="s1">: </span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">grp</span><span class="p">)))</span>
<span class="gp">...</span>
<span class="go">1: [1]</span>
<span class="go">2: [2]</span>
<span class="go">1: [1]</span>
<span class="go">2: [2]</span>
<span class="go">3: [3]</span>
<span class="go">2: [2]</span>
</pre></div>
<p>Compare this to, say, the SQL <code>GROUP BY</code> command, which groups elements regardless of their order of appearance.</p>
<p>When working with <code>groupby()</code>, you need to sort your data 
on the same key that you would like to group by. Otherwise, you may get 
unexpected results. This is so common that it helps to write a utility 
function to take care of this for you:</p>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">sort_and_group</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="sd">"""Group sorted `iterable` on `key`."""</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>
</pre></div>
<p>Returning to the swimmers example, the first thing you need to do is create a for loop that iterates over the data in the <code>events</code> tuple grouped by stroke:</p>
<div class="highlight python"><pre><span></span><span class="k">for</span> <span class="n">stroke</span><span class="p">,</span> <span class="n">evts</span> <span class="ow">in</span> <span class="n">sort_and_group</span><span class="p">(</span><span class="n">events</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">stroke</span><span class="p">):</span>
</pre></div>
<p>Next, you need to group the <code>evts</code> iterator by swimmer name inside of the above <code>for</code> loop:</p>
<div class="highlight python"><pre><span></span><span class="n">events_by_name</span> <span class="o">=</span> <span class="n">sort_and_group</span><span class="p">(</span><span class="n">evts</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</pre></div>
<p>To calculate the best time for each swimmer in <code>events_by_name</code>, you can call <code>min()</code> on the events in that swimmers group. (This works because you implemented the <code>.__lt__()</code> dunder method in the <code>Events</code> class.)</p>
<div class="highlight python"><pre><span></span><span class="n">best_times</span> <span class="o">=</span> <span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">evt</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">evt</span> <span class="ow">in</span> <span class="n">events_by_name</span><span class="p">)</span>
</pre></div>
<p>Note that the <code>best_times</code> generator yields <code>Event</code> objects containing the best stroke time for each swimmer. To build the relay teams, you’ll need to sort <code>best_times</code> by time and aggregate the result into groups of four. To aggregate the results, you can use the <code>grouper()</code> function from <a href="#the-grouper-recipe">The <code>grouper()</code> recipe</a> section and use <code>islice()</code> to grab the first two groups.</p>
<div class="highlight python"><pre><span></span><span class="n">sorted_by_time</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">best_times</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">time</span><span class="p">)</span>
<span class="n">teams</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">),</span> <span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">grouper</span><span class="p">(</span><span class="n">sorted_by_time</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span>
</pre></div>
<p>Now <code>teams</code> is an iterator over exactly two tuples 
representing the “A” and the “B” team for the stroke. The first 
component of each tuple is the letter “A” or “B”, and the second 
component is an iterator over <code>Event</code> objects containing the swimmers in the team. You can now print the results:</p>
<div class="highlight python"><pre><span></span><span class="k">for</span> <span class="n">team</span><span class="p">,</span> <span class="n">swimmers</span> <span class="ow">in</span> <span class="n">teams</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">'</span><span class="si">{stroke}</span><span class="s1"> </span><span class="si">{team}</span><span class="s1">: </span><span class="si">{names}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
        <span class="n">stroke</span><span class="o">=</span><span class="n">stroke</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(),</span>
        <span class="n">team</span><span class="o">=</span><span class="n">team</span><span class="p">,</span>
        <span class="n">names</span><span class="o">=</span><span class="s1">', '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">swimmer</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">swimmer</span> <span class="ow">in</span> <span class="n">swimmers</span><span class="p">)</span>
    <span class="p">))</span>
</pre></div>
<p>Here’s the full script:</p>
<div class="highlight python"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">namedtuple</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">itertools</span> <span class="k">as</span> <span class="nn">it</span>
<span class="kn">import</span> <span class="nn">statistics</span>


<span class="k">class</span> <span class="nc">Event</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s1">'Event'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'stroke'</span><span class="p">,</span> <span class="s1">'name'</span><span class="p">,</span> <span class="s1">'time'</span><span class="p">])):</span>
    <span class="vm">__slots__</span> <span class="o">=</span> <span class="p">()</span>

    <span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">time</span>


<span class="k">def</span> <span class="nf">sort_and_group</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">grouper</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">iters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">it</span><span class="o">.</span><span class="n">zip_longest</span><span class="p">(</span><span class="o">*</span><span class="n">iters</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="n">fillvalue</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">read_events</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">_strptime</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_median</span><span class="p">(</span><span class="n">times</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">statistics</span><span class="o">.</span><span class="n">median</span><span class="p">((</span><span class="n">_strptime</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="s1">'%M:%S:</span><span class="si">%f</span><span class="s1">'</span><span class="p">)</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
                                  <span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="n">row</span><span class="p">[</span><span class="s1">'Times'</span><span class="p">]))</span>

    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'Event'</span><span class="p">,</span> <span class="s1">'Name'</span><span class="p">,</span> <span class="s1">'Stroke'</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">,</span> <span class="n">restkey</span><span class="o">=</span><span class="s1">'Times'</span><span class="p">)</span>
        <span class="nb">next</span><span class="p">(</span><span class="n">reader</span><span class="p">)</span>  <span class="c1"># Skip header.</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">Event</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Stroke'</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">'Name'</span><span class="p">],</span> <span class="n">_median</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">'Times'</span><span class="p">]))</span>


<span class="n">events</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">read_events</span><span class="p">(</span><span class="s1">'swimmers.csv'</span><span class="p">))</span>

<span class="k">for</span> <span class="n">stroke</span><span class="p">,</span> <span class="n">evts</span> <span class="ow">in</span> <span class="n">sort_and_group</span><span class="p">(</span><span class="n">events</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">stroke</span><span class="p">):</span>
    <span class="n">events_by_name</span> <span class="o">=</span> <span class="n">sort_and_group</span><span class="p">(</span><span class="n">evts</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="n">best_times</span> <span class="o">=</span> <span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">evt</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">evt</span> <span class="ow">in</span> <span class="n">events_by_name</span><span class="p">)</span>
    <span class="n">sorted_by_time</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">best_times</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">evt</span><span class="p">:</span> <span class="n">evt</span><span class="o">.</span><span class="n">time</span><span class="p">)</span>
    <span class="n">teams</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">),</span> <span class="n">it</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">grouper</span><span class="p">(</span><span class="n">sorted_by_time</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">team</span><span class="p">,</span> <span class="n">swimmers</span> <span class="ow">in</span> <span class="n">teams</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">'</span><span class="si">{stroke}</span><span class="s1"> </span><span class="si">{team}</span><span class="s1">: </span><span class="si">{names}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
            <span class="n">stroke</span><span class="o">=</span><span class="n">stroke</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(),</span>
            <span class="n">team</span><span class="o">=</span><span class="n">team</span><span class="p">,</span>
            <span class="n">names</span><span class="o">=</span><span class="s1">', '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">swimmer</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">swimmer</span> <span class="ow">in</span> <span class="n">swimmers</span><span class="p">)</span>
        <span class="p">))</span>
</pre></div>
<p>If you run the above code, you’ll get the following output:</p>
<div class="highlight sh"><pre><span></span><span class="go">Backstroke A: Sophia, Grace, Penelope, Addison</span>
<span class="go">Backstroke B: Elizabeth, Audrey, Emily, Aria</span>
<span class="go">Breaststroke A: Samantha, Avery, Layla, Zoe</span>
<span class="go">Breaststroke B: Lillian, Aria, Ava, Alexa</span>
<span class="go">Butterfly A: Audrey, Leah, Layla, Samantha</span>
<span class="go">Butterfly B: Alexa, Zoey, Emma, Madison</span>
<span class="go">Freestyle A: Aubrey, Emma, Olivia, Evelyn</span>
<span class="go">Freestyle B: Elizabeth, Zoe, Addison, Madison</span>
</pre></div>
<h2 id="where-to-go-from-here">Where to Go From Here</h2>
<p>If you have made it this far, congratulations! I hope you have enjoyed the journey.</p>
<p><code>itertools</code> is a powerful module in the Python standard 
library, and an essential tool to have in your toolkit. With it, you can
 write faster and more memory efficient code that is often simpler and 
easier to read (although that is not always the case, as you saw in the 
section on <a href="#second-order-recurrence-relations">second order recurrence relations</a>).</p>
<p>If anything, though, <code>itertools</code> is a testament to the power of iterators and <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a>. Even though you have seen many techniques, this article only scratches the surface.</p>
<p>So I guess this means your journey is only just beginning.</p>
<div class="alert alert-warning" role="alert"><p><strong>Free Bonus:</strong> <a href="https://realpython.com/bonus/itertools-cheatsheet/" class="alert-link" data-toggle="modal" data-target="#modal-itertools-cheatsheet" data-focus="false">Click here to get our itertools cheat sheet</a> that summarizes the techniques demonstrated in this tutorial.</p></div>
<p>In fact, this article skipped two <code>itertools</code> functions: <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap"><code>starmap()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.compress"><code>compress()</code></a>. In my experience, these are two of the lesser used <code>itertools</code> functions, but I urge you to read their docs an experiment with your own use cases!</p>
<p>Here are a few places where you can find more examples of <code>itertools</code> in action (thanks to Brad Solomon for these fine suggestions):</p>
<ul>
<li><a href="https://stackoverflow.com/questions/9059173/what-is-the-purpose-in-pythons-itertools-repeat/9098860#9098860">What is the Purpose of <code>itertools.repeat()</code></a>?</li>
<li><a href="https://stackoverflow.com/questions/48421142/fastest-way-to-generate-a-random-like-unique-string-with-random-length-in-python/48421303#48421303">Fastest Way to Generate a Random-like Unique String With Random Length in Python 3</a></li>
<li><a href="https://stackoverflow.com/questions/49372880/write-pandas-dataframe-to-string-buffer-with-chunking/49374826#49374826">Write a Pandas DataFrame to a String Buffer with Chunking</a></li>
</ul>
<p>Finally, for even more tools for constructing iterators, take a look at <a href="https://github.com/erikrose/more-itertools">more-itertools</a>.</p>
<p>Do you have any favorite <code>itertools</code> recipes/use-cases? We would love to hear about them in the comments!</p>
<p><em>We would like to thank our readers Putcher and Samir Aghayev for 
pointing out a couple of errors in the original version of this article.</em></p>
</div>
<div class="card mt-4 mb-4 bg-secondary">
<p class="card-header h3 text-center bg-light">🐍 Python Tricks 💌</p>
<div class="card-body">
<div class="container">
<div class="row">
<div class="col-xs-12 col-sm-7">
<p>Get a short &amp; sweet <strong>Python Trick</strong> delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.</p>
</div>
<div class="col-xs-12 col-sm-5">
<img class="img-fluid rounded mb-3" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/pytrick-dict-merge.png" alt="Python Tricks Dictionary Merge" width="738" height="490">
</div>
</div>
<div class="row mb-3">
<form class="col-12" action="/optins/process/" method="post">
<input type="hidden" name="csrfmiddlewaretoken" value="0AqJQrwwWnLW6vCYnCugS3ZPLAc4HUJ56BtbswBCMBXTU1xPQ5PM9oUbBPPoCA9G">
<input type="hidden" name="slug" value="static-python-tricks-footer">
<div class="form-group">
<input name="email" type="email" class="form-control form-control-lg" placeholder="Email Address" required="">
</div>
<button name="submit" type="submit" class="btn btn-primary btn-lg btn-block">Send Me Python Tricks »</button>
</form>
</div>
</div>
</div>
</div>
<div class="card mt-3" id="author">
<p class="card-header h3">About <strong>David Amos</strong></p>
<div class="card-body">
<div class="container">
<div class="row">
<div class="col-12 col-md-3 align-self-center">
<a href="https://realpython.com/team/damos/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/me-small.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/me-small.f5f49f1c48e1.jpg&amp;w=100&amp;sig=38ffd9d7b49fe40a58e5868b04945ed741d6fef4 100w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/me-small.f5f49f1c48e1.jpg&amp;w=200&amp;sig=a308986ef202a905cf5376513299b30cb2ec7538 200w, https://files.realpython.com/media/me-small.f5f49f1c48e1.jpg 400w" class="rounded-circle img-fluid w-100 mb-0" alt="David Amos" sizes="25vw"></a>
</div>
<div class="col mt-3">
<p>David is a mathematician by training, a data scientist/Python developer by profession, and a coffee junkie by choice.</p>
<a href="https://realpython.com/team/damos/" class="card-link">» More about David</a>
</div>
</div>
</div>
</div>
<hr class="my-0">
<div class="card-body pb-0">
<div class="container">
<div class="row">
<p><em>Each tutorial at Real Python is created by a team of developers 
so that it meets our high quality standards. The team members who worked
 on this tutorial are:</em></p>
</div>
<div class="row align-items-center w-100 mx-auto">
<div class="col-4 col-sm-2 align-self-center">
<a href="https://realpython.com/team/asantos/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/asantos-avatar.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/asantos-avatar.888c78fffab3.jpg&amp;w=175&amp;sig=a095ca193d3f40e73e6921403c1c43e48c9a4bdc 175w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/asantos-avatar.888c78fffab3.jpg&amp;w=350&amp;sig=28c0dc29376daf4ca29d5f47b3708b873c21af76 350w, https://files.realpython.com/media/asantos-avatar.888c78fffab3.jpg 700w" sizes="10vw" class="rounded-circle img-fluid w-100" alt="Aldren Santos"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="https://realpython.com/team/asantos/" class="card-link"><p>Aldren</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="https://realpython.com/team/bsolomon/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/bsolomon.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/bsolomon.2a5a05833ac0.jpg&amp;w=234&amp;sig=853eac2d1d5be58ddd0495dc2a21d9e96519fdf6 234w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/bsolomon.2a5a05833ac0.jpg&amp;w=469&amp;sig=25311cd6c3fabe7bfe4e314ea4c30a84b3b5258f 469w, https://files.realpython.com/media/bsolomon.2a5a05833ac0.jpg 938w" sizes="10vw" class="rounded-circle img-fluid w-100" alt="Brad Solomon"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="https://realpython.com/team/bsolomon/" class="card-link"><p>Brad</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="https://realpython.com/team/dbader/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/daniel-square.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/daniel-square.d58bf4388750.jpg&amp;w=250&amp;sig=0f6c5ef7f5786b2a198fe2d700695467601836fe 250w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/daniel-square.d58bf4388750.jpg&amp;w=500&amp;sig=6d44e31ac8b0ed5d7bf09163b66e9374d79b7256 500w, https://files.realpython.com/media/daniel-square.d58bf4388750.jpg 1000w" sizes="10vw" class="rounded-circle img-fluid w-100" alt="Dan Bader"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="https://realpython.com/team/dbader/" class="card-link"><p>Dan</p></a>
</div>
</div>
<div class="row align-items-center w-100 mx-auto">
<div class="col-4 col-sm-2 align-self-center">
<a href="https://realpython.com/team/janderson/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/jima.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jima.0b8f990b951a.jpg&amp;w=175&amp;sig=e53eede9030c51f37a7ec1620965b715d909a184 175w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jima.0b8f990b951a.jpg&amp;w=350&amp;sig=62a26897ded6f8732a0b21adc788637a42de2ca8 350w, https://files.realpython.com/media/jima.0b8f990b951a.jpg 700w" sizes="10vw" class="rounded-circle img-fluid w-100" alt="Jim Anderson"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="https://realpython.com/team/janderson/" class="card-link"><p>Jim</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="https://realpython.com/team/jjablonski/"><img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/jjablonksi-avatar.jpg" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=200&amp;sig=d779dbceba743afb659648000525a6a71656ae98 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=400&amp;sig=99ce401a9a219f6b406309e90925252be1900dfc 400w, https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg 800w" sizes="10vw" class="rounded-circle img-fluid w-100" alt="Joanna Jablonski"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="https://realpython.com/team/jjablonski/" class="card-link"><p>Joanna</p></a>
</div>

<div class="col-4 col-sm-2 align-self-center"></div>
<div class="col pl-0 d-none d-sm-block"></div>
</div>
</div>
</div>
</div>
<div class="sidebar-module sidebar-module-inset p-0 my-4" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:25%;"></div>
<div class="rpad" data-unit="4x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"><a href="https://srv.realpython.net/click/63154477675/?c=48874902176&amp;p=58946116052&amp;r=95105" rel="nofollow" target="_blank"><img style="max-width: 100%; max-height: 100%; width: 100%;" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/2715fa5362672de6ffb80b688c08675b.jpg"></a></div>
</div>
</div>
<div class="card mt-4" id="reader-comments">
<p class="card-header h3">What Do You Think?</p>
<div class="text-center mt-3 mb-0 p-0">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check%20out%20this%20%23Python%20tutorial:%20Itertools%20in%20Python%203%2C%20By%20Example%20by%20@realpython&amp;url=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&amp;body=Check out this Python tutorial:%0A%0AItertools%20in%20Python%203%2C%20By%20Example%0A%0Ahttps%3A//realpython.com/python-itertools/" class="mr-1 badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
<div class="card-body">
<div class="alert alert-dark">
<p class="mb-0"><strong>Real Python Comment Policy:</strong> The most 
useful comments are those written with the goal of learning from or 
helping out other readers—after reading the whole article and all the 
earlier comments. Complaints and insults generally won’t make the cut 
here.</p>
</div>
<p>What’s your #1 takeaway or favorite thing you learned? How are you 
going to put your newfound skills to use? Leave a comment below and let 
us know.</p>
<div class="mb-4" id="disqus_thread"></div>
</div>
</div>
<div class="card mt-4 mb-4">
<p class="card-header h3">Keep Learning</p>
<div class="card-body">
<p class="mb-0">Related Tutorial Categories:
<a href="https://realpython.com/tutorials/advanced/" class="badge badge-light text-muted">advanced</a>
<a href="https://realpython.com/tutorials/python/" class="badge badge-light text-muted">python</a>
</p>
</div>
</div>
<div class="modal fade" tabindex="-1" role="dialog" id="rpvc">
<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
<div class="modal-content">
<div class="modal-header border-0 mt-3">
<div class="col-12 modal-title text-center">
<h2 class="my-0 mx-5">Master <u>Real-World Python Skills</u> With Unlimited Access to Real Python</h2>
<p class="text-center text-muted mt-2 mb-1">Already a member? <a href="https://realpython.com/account/login/">Log In</a></p>
</div>
</div>
<div class="modal-body bg-light">
<div class="col-12 text-center">
<p class="mb-2 mt-3"><a href="https://realpython.com/account/join/?utm_source=rp&amp;utm_medium=web&amp;utm_campaign=pwn&amp;utm_content=v1"><img class="w-50 mb-2" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/lesson-locked.svg"></a></p>
<p class="mx-auto w-66 mb-3"><strong>Join us and get access to hundreds of tutorials, hands-on video courses, and a community of expert Pythonistas:</strong></p>
<p><a href="https://realpython.com/account/join/?utm_source=rp&amp;utm_medium=web&amp;utm_campaign=pwn&amp;utm_content=v1" class="btn btn-primary btn-lg px-4">See Membership Options »</a>
</p></div>
</div>
<div class="modal-footer border-0">
<a href="#!" class="text-muted btn" data-dismiss="modal">Close</a>
</div>
</div>
</div>
</div>
</div>
<aside class="col-md-7 col-lg-4">
<div class="card mb-3 bg-secondary">
<form class="card-body" action="/optins/process/" method="post">
<div class="form-group">
<p class="h5 text-muted text-center">— FREE Email Series —</p>
<p class="h3 text-center">🐍 Python Tricks 💌</p>
<p><img class="img-fluid rounded" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/pytrick-dict-merge.png" alt="Python Tricks Dictionary Merge" width="738" height="490"></p>
</div>
<div class="form-group">
<input type="hidden" name="csrfmiddlewaretoken" value="0AqJQrwwWnLW6vCYnCugS3ZPLAc4HUJ56BtbswBCMBXTU1xPQ5PM9oUbBPPoCA9G">
<input type="hidden" name="slug" value="static-python-tricks-sidebar">
<input type="email" class="form-control form-control-md" name="email" placeholder="Email…" required="">
</div>
<button type="submit" name="submit" class="btn btn-primary btn-md btn-block">Get Python Tricks »</button>
<p class="mb-0 mt-2 text-muted text-center">🔒 No spam. Unsubscribe any time.</p>
</form>
</div>
<div class="sidebar-module sidebar-module-inset border">
<p class="h4"><a class="link-unstyled" href="https://realpython.com/tutorials/all/">All Tutorial Topics</a></p>
<a href="https://realpython.com/tutorials/advanced/" class="badge badge-light text-muted">advanced</a>
<a href="https://realpython.com/tutorials/api/" class="badge badge-light text-muted">api</a>
<a href="https://realpython.com/tutorials/basics/" class="badge badge-light text-muted">basics</a>
<a href="https://realpython.com/tutorials/best-practices/" class="badge badge-light text-muted">best-practices</a>
<a href="https://realpython.com/tutorials/community/" class="badge badge-light text-muted">community</a>
<a href="https://realpython.com/tutorials/databases/" class="badge badge-light text-muted">databases</a>
<a href="https://realpython.com/tutorials/data-science/" class="badge badge-light text-muted">data-science</a>
<a href="https://realpython.com/tutorials/devops/" class="badge badge-light text-muted">devops</a>
<a href="https://realpython.com/tutorials/django/" class="badge badge-light text-muted">django</a>
<a href="https://realpython.com/tutorials/docker/" class="badge badge-light text-muted">docker</a>
<a href="https://realpython.com/tutorials/flask/" class="badge badge-light text-muted">flask</a>
<a href="https://realpython.com/tutorials/front-end/" class="badge badge-light text-muted">front-end</a>
<a href="https://realpython.com/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>
<a href="https://realpython.com/tutorials/machine-learning/" class="badge badge-light text-muted">machine-learning</a>
<a href="https://realpython.com/tutorials/python/" class="badge badge-light text-muted">python</a>
<a href="https://realpython.com/tutorials/testing/" class="badge badge-light text-muted">testing</a>
<a href="https://realpython.com/tutorials/tools/" class="badge badge-light text-muted">tools</a>
<a href="https://realpython.com/tutorials/web-dev/" class="badge badge-light text-muted">web-dev</a>
<a href="https://realpython.com/tutorials/web-scraping/" class="badge badge-light text-muted">web-scraping</a>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:100%;"></div>
<div class="rpad" data-unit="1x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"><a href="https://srv.realpython.net/click/36020177995/?c=41484134757&amp;p=58946116052&amp;r=81104" rel="nofollow" target="_blank"><img style="max-width: 100%; max-height: 100%; width: 100%;" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/604f3fe5914274ddc6183bbdf3618e61.png"></a></div>
</div>
</div>
<div class="sidebar-sticky">
<div class="sidebar-module sidebar-module-inset border">
<p class="h4"><a class="link-unstyled" href="#toc">Table of Contents</a></p>
<div class="toc">
<ul>
<li><a href="#what-is-itertools-and-why-should-you-use-it">What Is Itertools and Why Should You Use It?</a></li>
<li><a href="#the-grouper-recipe">The grouper Recipe</a></li>
<li><a href="#et-tu-brute-force">Et tu, Brute Force?</a><ul>
<li><a href="#section-recap">Section Recap</a></li>
</ul>
</li>
<li><a href="#sequences-of-numbers">Sequences of Numbers</a><ul>
<li><a href="#evens-and-odds">Evens and Odds</a></li>
<li><a href="#recurrence-relations">Recurrence Relations</a></li>
<li><a href="#section-recap_1">Section Recap</a></li>
</ul>
</li>
<li><a href="#dealing-a-deck-of-cards">Dealing a Deck of Cards</a><ul>
<li><a href="#section-recap_2">Section Recap</a></li>
</ul>
</li>
<li><a href="#intermission-flattening-a-list-of-lists">Intermission: Flattening A List of Lists</a></li>
<li><a href="#analyzing-the-sp500">Analyzing the S&amp;P500</a><ul>
<li><a href="#maximum-gain-and-loss">Maximum Gain and Loss</a></li>
<li><a href="#longest-growth-streak">Longest Growth Streak</a></li>
<li><a href="#section-recap_3">Section Recap</a></li>
</ul>
</li>
<li><a href="#building-relay-teams-from-swimmer-data">Building Relay Teams From Swimmer Data</a></li>
<li><a href="#where-to-go-from-here">Where to Go From Here</a></li>
</ul>
</div>
</div>
<div class="sidebar-module sidebar-module-inset text-center my-3 py-0">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check%20out%20this%20%23Python%20tutorial:%20Itertools%20in%20Python%203%2C%20By%20Example%20by%20@realpython&amp;url=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-itertools/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&amp;body=Check out this Python tutorial:%0A%0AItertools%20in%20Python%203%2C%20By%20Example%0A%0Ahttps%3A//realpython.com/python-itertools/" class="mr-1 badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:25%;"></div>
<div class="rpad" data-unit="4x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"><a href="https://srv.realpython.net/click/64754707389/?c=31941813441&amp;p=58946116052&amp;r=14998" rel="nofollow" target="_blank"><img style="max-width: 100%; max-height: 100%; width: 100%;" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/257f65e32c1713399c59dacea36eb818.png"></a></div>
</div>
</div>
</div>
</aside>
</div>
</div>
<div class="modal fade" id="modal-itertools-cheatsheet" tabindex="-1" role="dialog" aria-hidden="true">
<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
<div class="modal-content">
<div class="modal-header bg-light pt-3 pb-2">
<div class="container-fluid">
<div class="row">
<div class="col-12">
<div class="progress" style="height: .5rem;">
<div class="progress-bar progress-bar-striped progress-bar-animated w-50" role="progressbar"></div>
</div>
</div>
<div class="col-12">
<p class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant access:</p>
</div>
</div>
</div>
<button type="button" class="close" data-dismiss="modal" aria-label="Close">
<span aria-hidden="true">×</span>
</button>
</div>
<div class="modal-body m-4">
<div class="container-fluid">
<div class="row align-items-center">
<div class="col-12 col-lg-4">
<img class="img-fluid rounded w-100 mb-4" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/itertools-cheatsheet.jpg">
</div>
<div class="col">
<p class="text-center h3 mb-4">Python "itertools" Cheat Sheet (PDF)</p>
<form class="col-12" action="/optins/process/" method="post">
<input type="hidden" name="csrfmiddlewaretoken" value="0AqJQrwwWnLW6vCYnCugS3ZPLAc4HUJ56BtbswBCMBXTU1xPQ5PM9oUbBPPoCA9G">
<input type="hidden" name="slug" value="itertools-cheatsheet">
<div class="form-group">
<input type="email" name="email" class="form-control" placeholder="Email Address" required="" autofocus="">
</div>
 <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Send Cheat Sheet »</button>
</form>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<footer class="footer">
<div class="container">
<p class="text-center text-muted">© 2012–2020 Real Python ⋅ <a href="https://realpython.com/newsletter/">Newsletter</a> ⋅ <a href="https://www.youtube.com/realpython">YouTube</a> ⋅ <a href="https://twitter.com/realpython">Twitter</a> ⋅ <a href="https://facebook.com/LearnRealPython">Facebook</a> ⋅ <a href="https://www.instagram.com/realpython/">Instagram</a><br><a href="https://realpython.com/">Python Tutorials</a> ⋅ <a href="https://realpython.com/search">Search</a> ⋅ <a href="https://realpython.com/privacy-policy/">Privacy Policy</a> ⋅ <a href="https://realpython.com/energy-policy/" class="text-success active">Energy Policy</a> ⋅ <a href="https://realpython.com/sponsorships/">Advertise</a> ⋅ <a href="https://realpython.com/contact/">Contact</a><br>❤️ Happy Pythoning!</p>
</div>
</footer>
<script>
      (function(document, history, location) {
        var HISTORY_SUPPORT = !!(history && history.pushState);

        var anchorScrolls = {
          ANCHOR_REGEX: /^#[^ ]+$/,
          OFFSET_HEIGHT_PX: 120,

          /**
           * Establish events, and fix initial scroll position if a hash is provided.
           */
          init: function() {
            this.scrollToCurrent();
            window.addEventListener('hashchange', this.scrollToCurrent.bind(this));
            document.body.addEventListener('click', this.delegateAnchors.bind(this));
          },

          /**
           * Return the offset amount to deduct from the normal scroll position.
           * Modify as appropriate to allow for dynamic calculations
           */
          getFixedOffset: function() {
            return this.OFFSET_HEIGHT_PX;
          },

          /**
           * If the provided href is an anchor which resolves to an element on the
           * page, scroll to it.
           * @param  {String} href
           * @return {Boolean} - Was the href an anchor.
           */
          scrollIfAnchor: function(href, pushToHistory) {
            var match, rect, anchorOffset;

            if(!this.ANCHOR_REGEX.test(href)) {
              return false;
            }

            match = document.getElementById(href.slice(1));

            if(match) {
              rect = match.getBoundingClientRect();
              anchorOffset = window.pageYOffset + rect.top - this.getFixedOffset();
              window.scrollTo(window.pageXOffset, anchorOffset);

              // Add the state to history as-per normal anchor links
              if(HISTORY_SUPPORT && pushToHistory) {
                history.pushState({}, document.title, location.pathname + href);
              }
            }

            return !!match;
          },

          /**
           * Attempt to scroll to the current location's hash.
           */
          scrollToCurrent: function() {
            this.scrollIfAnchor(window.location.hash);
          },

          /**
           * If the click event's target was an anchor, fix the scroll position.
           */
          delegateAnchors: function(e) {
            var elem = e.target;

            if(
              elem.nodeName === 'A' &&
              this.scrollIfAnchor(elem.getAttribute('href'), true)
            ) {
              e.preventDefault();
            }
          }
        };

        window.addEventListener(
          'DOMContentLoaded', anchorScrolls.init.bind(anchorScrolls)
        );
      })(window.document, window.history, window.location);
    </script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/jquery.js"></script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/popper.js"></script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/bootstrap.js"></script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/repl-toggle.js"></script>
<script>window.rp_prop_id = '58946116052';</script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/tag.js" async=""></script>

<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/2153.js"></script>
<script>
  (function() {
    function throttle(a, b) { var c, d; return function () { var e = this, f = arguments, g = +new Date; c && g < c + a ? (clearTimeout(d), d = setTimeout(function () { c = g, b.apply(e, f) }, a)) : (c = g, b.apply(e, f)) } }
    var elems = document.getElementsByClassName("js-needs-scaling");
    var resizeAll = function() {
      Array.prototype.forEach.call(elems, function(elem) {
        var frames = elem.getElementsByTagName("iframe")
        if (frames.length === 0) {
          return;
        }
        var disclosure = elem.getElementsByClassName("js-disclosure");
        if (disclosure.length > 0) {
          disclosure[0].style.display = "";
        } else {
          disclosure[0].style.display = "none";
        }
        if (frames[0].clientWidth <= elem.parentElement.clientWidth) {
          elem.style.transform = "";
          elem.classList.add("text-center");
          return;
        }
        elem.classList.remove("text-center");
        elem.style.transform = "scale(" + elem.clientWidth / frames[0].width + ")";
      });
    }
    var periodicResize = function() {
      resizeAll();
      setTimeout(periodicResize, 100);
    }
    setTimeout(periodicResize, 100);
  })();
  </script>
<script id="dsq-count-scr" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/count.js" async=""></script>
<script>
    var disqus_config = function () {
      this.page.url = 'https://realpython.com/python-itertools/';
      this.page.identifier = 'https://realpython.com/python-itertools/';
      this.callbacks.onReady = [function() {
        if (window.onDisqusReady) {
          window.onDisqusReady();
        }
      }];
    };
    var disqus_script_url = 'https://realpython.disqus.com/embed.js';
  </script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/lazydisqus.js" defer="defer"></script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/OneSignalSDK.js" async=""></script>
<script>
    var OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
      OneSignal.init({
        appId: "c0081e20-a523-42bb-b0ac-04c5a9e8bf40"
      });
    });
  </script>
<script src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/articlevc.js" defer="defer"></script>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Article",
    "headline": "Itertools in Python 3, By Example",
    
    "image": {
      "@type": "ImageObject",
      "url": "https://files.realpython.com/media/Itertools-in-Python-3-By-Example_Watermarked.28292955f88b.jpg",
      "width": 1920,
      "height": 1080
    },
    
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://realpython.com/python-itertools/"
    },
    "datePublished": "2018-05-30T14:00:00+00:00",
    "dateModified": "2019-10-03T01:33:36.625868+00:00",
     "publisher": {
      "@type": "Organization",
      "name": "Real Python",
      "logo": {
        "@type": "ImageObject",
        "url": "https://realpython.com/static/real-python-logo-square-tiny.b2452b6d3823.png",
        "width": 60,
        "height": 60
      }
    },
    "author": {
      "@type": "Organization",
      "name": "Real Python",
      "url": "https://realpython.com",
      "logo": "https://realpython.com/static/real-python-logo-square.28474fda9228.png"
    },
    "description": "Master Python&#39;s itertools module by constructing practical examples. We&#39;ll start out simple and then gradually increase in complexity, encouraging you to &quot;think iteratively.&quot;"
  }
  </script>
<script>
  var _dcq = _dcq || [];
  var _dcs = _dcs || {};
  _dcs.account = '6214500';

  (function() {
    var dc = document.createElement('script');
    dc.type = 'text/javascript'; dc.async = true;
    dc.src = '//tag.getdrip.com/6214500.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(dc, s);
  })();
</script>
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '2220911568135371');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=2220911568135371&ev=PageView&noscript=1"
/></noscript>


<div class="drip-tab-container">
  <div id="drip-106703" class="drip-tab bottom right side-image image-left">
    <div id="drip-header-106703" class="drip-header">
      <a href="#" id="drip-toggle-106703" class="drip-toggle">
        <h2 id="drip-teaser-106703">Improve Your Python</h2>
        <span id="drip-tab-up-106703" class="drip-arrow up">
          <svg width="12px" height="8px" viewBox="1362 659 12 8" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
            <polygon id="right_angle" stroke="none" fill="#FFFFFF" fill-rule="evenodd" transform="translate(1368.000000, 662.703125) rotate(-90.000000) translate(-1368.000000, -662.703125) " points="1364.29688 667.296875 1368.89062 662.703125 1364.29688 658.109375 1365.70312 656.703125 1371.70312 662.703125 1365.70312 668.703125"></polygon>
          </svg>
        </span>
        <span id="drip-tab-down-106703" class="drip-arrow down" style="display: none"></span>
      </a>
    </div>
    <div id="drip-content-106703" class="drip-content drip-clearfix" style="height: auto; bottom: -543px;">
      <a id="drip-close-106703" class="drip-close">
        <svg width="12px" height="12px" viewBox="630 19 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
          <polygon id="x" stroke="none" fill="#A8ACB9" fill-rule="evenodd" points="641.376687 30.1740899 636.49366 24.436669 641.095466 19 639.510399 19 635.701126 23.6038176 631.866288 19 630.281221 19 634.883028 24.436669 630 30.1740899 631.585067 30.1740899 635.701126 25.2463857 639.791621 30.1740899"></polygon>
        </svg>
      </a>

      <div id="drip-form-panel-106703" class="drip-panel drip-clearfix" style="display: block;">
        
          <div class="drip-form-aside">
            <span class="drip-image-helper"></span>
            <img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/side_ded3082af3893736e51b0d2da53701b6.png" class="drip-image">
          </div>
        

        <div class="drip-form-main">
          <h3 id="drip-content-header-106703">Improve Your Python</h3>
          
            <div id="drip-scroll-106703" class="drip-scroll">
          
            <div class="drip-description">...with a fresh 🐍&nbsp;<strong>Python&nbsp;Trick</strong>&nbsp;💌 &nbsp;<br>
code snippet every couple of days:</div>
            <form id="drip-form-106703">
              <div style="display: none">
                <input type="hidden" name="form_id" value="106703">
              </div>
              <dl class="no-labels">
                
                  
                    <dt>Email Address</dt>
                    <dd>
                      
                        <input type="email" name="fields[email]" placeholder="Email Address" class="drip-text-field">
                        <div id="drip-errors-for-email-106703" class="drip-errors"></div>
                      
                    </dd>
                  
                
                  
                    <dt></dt>
                    <dd>
                      
                        <div class="zenput zenput--checkbox hidden" data-container="eu-checkbox">
                          <input type="hidden" name="fields[eu_consent]" id="drip-field-eu_consent-106703-denied" value="denied" disabled="disabled">
                          <input type="checkbox" name="fields[eu_consent]" id="drip-field-eu_consent-106703" value="granted" disabled="disabled">
                          <label class="zenput__checkbox-label" for="drip-field-eu_consent-106703">Receive
 the Real Python newsletter and get notified about new tutorials we 
publish on the site, as well as occasional special offers.
                            <div class="zenput__checkbox-label__icon"><svg class="octicon octicon-check" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg></div>
                          </label>
                        </div>
                      
                    </dd>
                  
                
                  
                    <input type="hidden" name="fields[eu_consent_message]" value="Receive the Real Python newsletter and get notified about new tutorials we publish on the site, as well as occasional special offers.">
                  
                
                
                <div style="display: none;" aria-hidden="true">
                  <dt for="website">Website</dt>
                  <dd>
                    <input type="text" id="website" name="website" placeholder="Website" class="drip-text-field" tabindex="-1" autocomplete="false">
                  </dd>
                </div>
              </dl>
              <div class="form-controls">
                <input type="submit" name="submit" value="Send Python Tricks »" id="drip-submit-106703" class="drip-submit-button">
              </div>
            </form>
          </div>
        </div>
      </div>

      <div id="drip-success-panel-106703" class="drip-success drip-panel drip-clearfix" style="display: none">
        <h3>Almost there...</h3>
        <p class="drip-description drip-post-submission">Check your inbox. I'm sending you the first Python Trick right now.</p>
      </div>

      
    </div>
  </div>
</div><div class="drip-lightbox-wrapper">
  <div id="drip-108609" class="drip-lightbox drip-hidden side-image image-right">
    <div id="drip-content-108609" class="drip-content" style="height: auto;">
      <a id="drip-close-108609" class="drip-close">
        <svg width="12px" height="12px" viewBox="630 19 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
          <polygon id="x" stroke="none" fill="#A8ACB9" fill-rule="evenodd" points="641.376687 30.1740899 636.49366 24.436669 641.095466 19 639.510399 19 635.701126 23.6038176 631.866288 19 630.281221 19 634.883028 24.436669 630 30.1740899 631.585067 30.1740899 635.701126 25.2463857 639.791621 30.1740899"></polygon>
        </svg>
      </a>

      <div id="drip-form-panel-108609" class="drip-panel" style="display: block;">
        
          <div class="drip-form-aside">
            <span class="drip-image-helper"></span>
            <img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/side_0743418fd26dda9240db39b8bc3744e1.png" class="drip-image">
          </div>
        

        <div class="drip-form-main">
          <h3 id="drip-content-header-108609">Get the Python Cheat Sheet</h3>
          
            <div id="drip-scroll-108609" class="drip-scroll">
          
            <div class="drip-description">Enter your email address below and we'll send you the Python cheat sheet right away:</div>

            <form id="drip-form-108609">
              <dl class="no-labels">
                
                  
                    
                      <dt>Email Address</dt>
                    
                    <dd>
                      
                        <input type="email" name="fields[email]" placeholder="Email Address" class="drip-text-field">
                        <div id="drip-errors-for-email-108609" class="drip-errors"></div>
                      
                    </dd>
                  
                
                  
                    
                    <dd>
                      
                        <div class="zenput zenput--checkbox hidden" data-container="eu-checkbox">
                          <input type="hidden" name="fields[eu_consent]" id="drip-field-eu_consent-108609-denied" value="denied" disabled="disabled">
                          <input type="checkbox" name="fields[eu_consent]" id="drip-field-eu_consent-108609" value="granted" disabled="disabled">
                          <label class="zenput__checkbox-label" for="drip-field-eu_consent-108609">Receive
 the Real Python newsletter and get notified about new tutorials we 
publish on the site, as well as occasional special offers.
                            <div class="zenput__checkbox-label__icon"><svg class="octicon octicon-check" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg></div>
                          </label>
                        </div>
                      
                    </dd>
                  
                
                  
                    <input type="hidden" name="fields[eu_consent_message]" value="Receive the Real Python newsletter and get notified about new tutorials we publish on the site, as well as occasional special offers.">
                  
                
                
                <div style="display: none;" aria-hidden="true">
                  <dt for="website">Website</dt>
                  <dd>
                    <input type="text" id="website" name="website" placeholder="Website" class="drip-text-field" tabindex="-1" autocomplete="false">
                  </dd>
                </div>
              </dl>
              <div class="form-controls">
                <input type="submit" name="submit" value="Send My Python Cheat Sheet »" id="drip-submit-108609" class="drip-submit-button">
              </div>
            </form>
          </div>
        </div>
      </div>

      <div id="drip-success-panel-108609" class="drip-success drip-panel" style="display: none">
        <h3>Almost there...</h3>
        <p class="drip-description drip-post-submission">We emailed you the cheat sheet. Please check your inbox in a few minutes.</p>
      </div>

      
    </div>
  </div>
  <div id="drip-backdrop-108609" class="drip-backdrop drip-fade drip-hidden"></div>
</div><div class="drip-lightbox-wrapper">
  <div id="drip-108599" class="drip-lightbox drip-hidden side-image image-right">
    <div id="drip-content-108599" class="drip-content" style="height: auto;">
      <a id="drip-close-108599" class="drip-close">
        <svg width="12px" height="12px" viewBox="630 19 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
          <polygon id="x" stroke="none" fill="#A8ACB9" fill-rule="evenodd" points="641.376687 30.1740899 636.49366 24.436669 641.095466 19 639.510399 19 635.701126 23.6038176 631.866288 19 630.281221 19 634.883028 24.436669 630 30.1740899 631.585067 30.1740899 635.701126 25.2463857 639.791621 30.1740899"></polygon>
        </svg>
      </a>

      <div id="drip-form-panel-108599" class="drip-panel" style="display: block;">
        
          <div class="drip-form-aside">
            <span class="drip-image-helper"></span>
            <img src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/side_c058822f7c534cad01d5dea43398e2fd.png" class="drip-image">
          </div>
        

        <div class="drip-form-main">
          <h3 id="drip-content-header-108599">Get a Sample Chapter From the First Course</h3>
          
            <div id="drip-scroll-108599" class="drip-scroll">
          
            <div class="drip-description">Enter your email address below and we'll send you the sample chapter right away:</div>

            <form id="drip-form-108599">
              <dl class="no-labels">
                
                  
                    
                      <dt>Email Address</dt>
                    
                    <dd>
                      
                        <input type="email" name="fields[email]" placeholder="Email Address" class="drip-text-field">
                        <div id="drip-errors-for-email-108599" class="drip-errors"></div>
                      
                    </dd>
                  
                
                  
                    
                    <dd>
                      
                        <div class="zenput zenput--checkbox hidden" data-container="eu-checkbox">
                          <input type="hidden" name="fields[eu_consent]" id="drip-field-eu_consent-108599-denied" value="denied" disabled="disabled">
                          <input type="checkbox" name="fields[eu_consent]" id="drip-field-eu_consent-108599" value="granted" disabled="disabled">
                          <label class="zenput__checkbox-label" for="drip-field-eu_consent-108599">Receive
 the Real Python newsletter and get notified about new tutorials we 
publish on the site, as well as occasional special offers.
                            <div class="zenput__checkbox-label__icon"><svg class="octicon octicon-check" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg></div>
                          </label>
                        </div>
                      
                    </dd>
                  
                
                  
                    <input type="hidden" name="fields[eu_consent_message]" value="Receive the Real Python newsletter and get notified about new tutorials we publish on the site, as well as occasional special offers.">
                  
                
                
                <div style="display: none;" aria-hidden="true">
                  <dt for="website">Website</dt>
                  <dd>
                    <input type="text" id="website" name="website" placeholder="Website" class="drip-text-field" tabindex="-1" autocomplete="false">
                  </dd>
                </div>
              </dl>
              <div class="form-controls">
                <input type="submit" name="submit" value="Get Sample Chapter »" id="drip-submit-108599" class="drip-submit-button">
              </div>
            </form>
          </div>
        </div>
      </div>

      <div id="drip-success-panel-108599" class="drip-success drip-panel" style="display: none">
        <h3>Almost there...</h3>
        <p class="drip-description drip-post-submission">We emailed you the sample chapter. Please check your inbox in a few minutes.</p>
      </div>

      
    </div>
  </div>
  <div id="drip-backdrop-108599" class="drip-backdrop drip-fade drip-hidden"></div>
</div><iframe style="display: none;" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/webPushAnalytics.htm"></iframe><div id="onesignal-bell-container" class="onesignal-bell-container onesignal-reset onesignal-bell-container-bottom-left"><div id="onesignal-bell-launcher" class="onesignal-bell-launcher onesignal-bell-launcher-md onesignal-bell-launcher-bottom-left onesignal-bell-launcher-theme-default onesignal-bell-launcher-active" style="bottom: 15px; left: 15px;"><div class="onesignal-bell-launcher-button"><svg class="onesignal-bell-svg" xmlns="http://www.w3.org/2000/svg" width="99.7" height="99.7" viewBox="0 0 99.7 99.7" style="filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));; -webkit-filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));;"><circle class="background" cx="49.9" cy="49.9" r="49.9" style="fill: rgb(208, 2, 27);"></circle><path class="foreground" d="M50.1 66.2H27.7s-2-.2-2-2.1c0-1.9 1.7-2 1.7-2s6.7-3.2 6.7-5.5S33 52.7 33 43.3s6-16.6 13.2-16.6c0 0 1-2.4 3.9-2.4 2.8 0 3.8 2.4 3.8 2.4 7.2 0 13.2 7.2 13.2 16.6s-1 11-1 13.3c0 2.3 6.7 5.5 6.7 5.5s1.7.1 1.7 2c0 1.8-2.1 2.1-2.1 2.1H50.1zm-7.2 2.3h14.5s-1 6.3-7.2 6.3-7.3-6.3-7.3-6.3z" style="fill: rgb(255, 255, 255);"></path><ellipse class="stroke" cx="49.9" cy="49.9" rx="37.4" ry="36.9" style="stroke: rgb(255, 255, 255);"></ellipse></svg></div><div class="onesignal-bell-launcher-badge" style="filter: drop-shadow(0 2px 4px rgba(34,36,38,0));; -webkit-filter: drop-shadow(0 2px 4px rgba(34,36,38,0));;"></div><div class="onesignal-bell-launcher-message"><div class="onesignal-bell-launcher-message-body">Receive a notification when we post a new tutorial</div></div><div class="onesignal-bell-launcher-dialog" style="filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));; -webkit-filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));;"><div class="onesignal-bell-launcher-dialog-body"></div></div></div></div></body><span class="gr__tooltip"><span class="gr__tooltip-content"></span><i class="gr__tooltip-logo"></i><span class="gr__triangle"></span></span><iframe sandbox="allow-scripts allow-same-origin" id="2374dee7ff1241ed8" allowtransparency="true" marginheight="0" marginwidth="0" hspace="0" vspace="0" style="height:0px;width:0px;display:none;" scrolling="no" src="Itertools%20in%20Python%203,%20By%20Example%20%E2%80%93%20Real%20Python_files/cs.htm" width="0" height="0" frameborder="0">
    </iframe></html>